/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IEscrow {
  export type DepositStruct = {
    amount: PromiseOrValue<BigNumberish>;
    endTimestamp: PromiseOrValue<BigNumberish>;
    coin: PromiseOrValue<BigNumberish>;
  };

  export type DepositStructOutput = [BigNumber, BigNumber, number] & {
    amount: BigNumber;
    endTimestamp: BigNumber;
    coin: number;
  };
}

export interface EscrowInterface extends utils.Interface {
  functions: {
    "deposit(uint256,address,uint8)": FunctionFragment;
    "depositOf(uint256)": FunctionFragment;
    "getAllAvailableDeposits()": FunctionFragment;
    "getManagement()": FunctionFragment;
    "getNextDepositId()": FunctionFragment;
    "getNextDepositIdToWithdraw()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "refundNFT(address,uint256,uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawByManager(uint256,uint256)": FunctionFragment;
    "withdrawByManager()": FunctionFragment;
    "withdrawToAddress(address,uint256,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deposit"
      | "depositOf"
      | "getAllAvailableDeposits"
      | "getManagement"
      | "getNextDepositId"
      | "getNextDepositIdToWithdraw"
      | "owner"
      | "pause"
      | "paused"
      | "refundNFT"
      | "renounceOwnership"
      | "transferOwnership"
      | "unpause"
      | "withdraw"
      | "withdrawByManager(uint256,uint256)"
      | "withdrawByManager()"
      | "withdrawToAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAvailableDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getManagement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextDepositId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextDepositIdToWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refundNFT",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawByManager(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawByManager()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToAddress",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllAvailableDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextDepositId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextDepositIdToWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refundNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawByManager(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawByManager()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToAddress",
    data: BytesLike
  ): Result;

  events: {
    "Deposited(address,address,uint256,uint256)": EventFragment;
    "NFTRefunded(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdrawn(uint256,uint256)": EventFragment;
    "WithdrawnByManager(address,uint256,uint8,bool)": EventFragment;
    "WithdrawnToAddress(address,address,uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTRefunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnByManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnToAddress"): EventFragment;
}

export interface DepositedEventObject {
  manager: string;
  payer: string;
  weiAmount: BigNumber;
  endTimestamp: BigNumber;
}
export type DepositedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface NFTRefundedEventObject {
  caller: string;
  collection: string;
  tokenId: BigNumber;
}
export type NFTRefundedEvent = TypedEvent<
  [string, string, BigNumber],
  NFTRefundedEventObject
>;

export type NFTRefundedEventFilter = TypedEventFilter<NFTRefundedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawnEventObject {
  startDepositId: BigNumber;
  endDepositId: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [BigNumber, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface WithdrawnByManagerEventObject {
  manager: string;
  amount: BigNumber;
  coin: number;
  withdrawnAll: boolean;
}
export type WithdrawnByManagerEvent = TypedEvent<
  [string, BigNumber, number, boolean],
  WithdrawnByManagerEventObject
>;

export type WithdrawnByManagerEventFilter =
  TypedEventFilter<WithdrawnByManagerEvent>;

export interface WithdrawnToAddressEventObject {
  manager: string;
  receiver: string;
  amount: BigNumber;
  coin: number;
}
export type WithdrawnToAddressEvent = TypedEvent<
  [string, string, BigNumber, number],
  WithdrawnToAddressEventObject
>;

export type WithdrawnToAddressEventFilter =
  TypedEventFilter<WithdrawnToAddressEvent>;

export interface Escrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      amount: PromiseOrValue<BigNumberish>,
      payer: PromiseOrValue<string>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositOf(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IEscrow.DepositStructOutput]>;

    getAllAvailableDeposits(
      overrides?: CallOverrides
    ): Promise<[IEscrow.DepositStructOutput[]]>;

    getManagement(overrides?: CallOverrides): Promise<[string]>;

    getNextDepositId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNextDepositIdToWithdraw(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    refundNFT(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      depositId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawByManager(uint256,uint256)"(
      depositId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawByManager()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawToAddress(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    payer: PromiseOrValue<string>,
    coin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositOf(
    depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IEscrow.DepositStructOutput>;

  getAllAvailableDeposits(
    overrides?: CallOverrides
  ): Promise<IEscrow.DepositStructOutput[]>;

  getManagement(overrides?: CallOverrides): Promise<string>;

  getNextDepositId(overrides?: CallOverrides): Promise<BigNumber>;

  getNextDepositIdToWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  refundNFT(
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    depositId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawByManager(uint256,uint256)"(
    depositId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawByManager()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawToAddress(
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    coin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(
      amount: PromiseOrValue<BigNumberish>,
      payer: PromiseOrValue<string>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositOf(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IEscrow.DepositStructOutput>;

    getAllAvailableDeposits(
      overrides?: CallOverrides
    ): Promise<IEscrow.DepositStructOutput[]>;

    getManagement(overrides?: CallOverrides): Promise<string>;

    getNextDepositId(overrides?: CallOverrides): Promise<BigNumber>;

    getNextDepositIdToWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    refundNFT(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      depositId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdrawByManager(uint256,uint256)"(
      depositId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawByManager()"(overrides?: CallOverrides): Promise<void>;

    withdrawToAddress(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposited(address,address,uint256,uint256)"(
      manager?: PromiseOrValue<string> | null,
      payer?: PromiseOrValue<string> | null,
      weiAmount?: null,
      endTimestamp?: null
    ): DepositedEventFilter;
    Deposited(
      manager?: PromiseOrValue<string> | null,
      payer?: PromiseOrValue<string> | null,
      weiAmount?: null,
      endTimestamp?: null
    ): DepositedEventFilter;

    "NFTRefunded(address,address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): NFTRefundedEventFilter;
    NFTRefunded(
      caller?: PromiseOrValue<string> | null,
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): NFTRefundedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Withdrawn(uint256,uint256)"(
      startDepositId?: PromiseOrValue<BigNumberish> | null,
      endDepositId?: PromiseOrValue<BigNumberish> | null
    ): WithdrawnEventFilter;
    Withdrawn(
      startDepositId?: PromiseOrValue<BigNumberish> | null,
      endDepositId?: PromiseOrValue<BigNumberish> | null
    ): WithdrawnEventFilter;

    "WithdrawnByManager(address,uint256,uint8,bool)"(
      manager?: PromiseOrValue<string> | null,
      amount?: null,
      coin?: null,
      withdrawnAll?: PromiseOrValue<boolean> | null
    ): WithdrawnByManagerEventFilter;
    WithdrawnByManager(
      manager?: PromiseOrValue<string> | null,
      amount?: null,
      coin?: null,
      withdrawnAll?: PromiseOrValue<boolean> | null
    ): WithdrawnByManagerEventFilter;

    "WithdrawnToAddress(address,address,uint256,uint8)"(
      manager?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      coin?: null
    ): WithdrawnToAddressEventFilter;
    WithdrawnToAddress(
      manager?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      coin?: null
    ): WithdrawnToAddressEventFilter;
  };

  estimateGas: {
    deposit(
      amount: PromiseOrValue<BigNumberish>,
      payer: PromiseOrValue<string>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositOf(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllAvailableDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    getManagement(overrides?: CallOverrides): Promise<BigNumber>;

    getNextDepositId(overrides?: CallOverrides): Promise<BigNumber>;

    getNextDepositIdToWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    refundNFT(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      depositId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawByManager(uint256,uint256)"(
      depositId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawByManager()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawToAddress(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      amount: PromiseOrValue<BigNumberish>,
      payer: PromiseOrValue<string>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositOf(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllAvailableDeposits(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getManagement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextDepositId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextDepositIdToWithdraw(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundNFT(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      depositId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawByManager(uint256,uint256)"(
      depositId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawByManager()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToAddress(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
