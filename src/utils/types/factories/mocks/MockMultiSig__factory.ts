/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MockMultiSig,
  MockMultiSigInterface,
} from "../../mocks/MockMultiSig";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
    ],
    name: "destroy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055610153806100326000396000f3fe60806040526004361061001e5760003560e01c8062f55d9d1461002757005b3661002557005b005b34801561003357600080fd5b506100256100423660046100e0565b60005473ffffffffffffffffffffffffffffffffffffffff1633146100c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f526573657276653a206e6f74206f776e65720000000000000000000000000000604482015260640160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16ff5b6000602082840312156100f257600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461011657600080fd5b939250505056fea26469706673582212207855d7443233e009f29b0a53208c17bad72df67f619afafa9216df878ae8c6d364736f6c63430008130033";

type MockMultiSigConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockMultiSigConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockMultiSig__factory extends ContractFactory {
  constructor(...args: MockMultiSigConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockMultiSig> {
    return super.deploy(overrides || {}) as Promise<MockMultiSig>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockMultiSig {
    return super.attach(address) as MockMultiSig;
  }
  override connect(signer: Signer): MockMultiSig__factory {
    return super.connect(signer) as MockMultiSig__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockMultiSigInterface {
    return new utils.Interface(_abi) as MockMultiSigInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockMultiSig {
    return new Contract(address, _abi, signerOrProvider) as MockMultiSig;
  }
}
