/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ICRPStaking,
  ICRPStakingInterface,
} from "../../interfaces/ICRPStaking";

const _abi = [
  {
    inputs: [],
    name: "CRPStaking__DirectERC721TokenTransfer",
    type: "error",
  },
  {
    inputs: [],
    name: "CRPStaking__InvalidTimeUnit",
    type: "error",
  },
  {
    inputs: [],
    name: "CRPStaking__NoRewards",
    type: "error",
  },
  {
    inputs: [],
    name: "CRPStaking__NoTokensGiven",
    type: "error",
  },
  {
    inputs: [],
    name: "CRPStaking__NotCrowdfundingToken",
    type: "error",
  },
  {
    inputs: [],
    name: "CRPStaking__NotTokenOwnerOrApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "CRPStaking__NotTokenStaker",
    type: "error",
  },
  {
    inputs: [],
    name: "CRPStaking__TokenAddressZero",
    type: "error",
  },
  {
    inputs: [],
    name: "CRPStaking__TokenIDOutOfTier",
    type: "error",
  },
  {
    inputs: [],
    name: "CRPStaking__WithdrawingMoreThanStaked",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "rewardAmount",
        type: "uint256",
      },
    ],
    name: "RewardsClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "_conditionId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_timeUnit",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256[3]",
        name: "_rewardsPerUnitTime",
        type: "uint256[3]",
      },
    ],
    name: "StakingConditionSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
    ],
    name: "TokensStaked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
    ],
    name: "TokensWithdrawn",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "claimer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "USDTokenClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "depositor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "USDTokenSplitted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "manager",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
    ],
    name: "WithdrawnForAddress",
    type: "event",
  },
  {
    inputs: [],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "claimUSD",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllStakersArray",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum ICrowdfund.QuotaClass",
        name: "classz",
        type: "uint8",
      },
    ],
    name: "getClassAmounts",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentStakingCondition",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "timeUnit",
            type: "uint256",
          },
          {
            internalType: "uint256[3]",
            name: "rewardsPerUnitTime",
            type: "uint256[3]",
          },
          {
            internalType: "uint256",
            name: "startTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTimestamp",
            type: "uint256",
          },
        ],
        internalType: "struct ICRPStaking.StakingCondition",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getIsIndexed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNextConditionId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "staker",
        type: "address",
      },
    ],
    name: "getSplitFactor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "staker",
        type: "address",
      },
    ],
    name: "getStaker",
    outputs: [
      {
        components: [
          {
            internalType: "uint256[3]",
            name: "amountStaked",
            type: "uint256[3]",
          },
          {
            internalType: "uint256",
            name: "timeOfLastUpdate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "unclaimedRewards",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "conditionIdOflastUpdate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakersArrayIndex",
            type: "uint256",
          },
        ],
        internalType: "struct ICRPStaking.Staker",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getStakerAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getStakersArray",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "conditionId",
        type: "uint256",
      },
    ],
    name: "getStakingCondition",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "timeUnit",
            type: "uint256",
          },
          {
            internalType: "uint256[3]",
            name: "rewardsPerUnitTime",
            type: "uint256[3]",
          },
          {
            internalType: "uint256",
            name: "startTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTimestamp",
            type: "uint256",
          },
        ],
        internalType: "struct ICRPStaking.StakingCondition",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStakingToken",
    outputs: [
      {
        internalType: "contract IERC721ArtHandle",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalSplitFactor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "staker",
        type: "address",
      },
    ],
    name: "getUnclaimedUSD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stakingToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "timeUnit",
        type: "uint256",
      },
      {
        internalType: "uint256[3]",
        name: "rewardsPerUnitTime",
        type: "uint256[3]",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timeUnit",
        type: "uint256",
      },
      {
        internalType: "uint256[3]",
        name: "rewardsPerUnitTime",
        type: "uint256[3]",
      },
    ],
    name: "setStakingCondition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "splitUSD",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
    ],
    name: "stakeForAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
    ],
    name: "withdrawForAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class ICRPStaking__factory {
  static readonly abi = _abi;
  static createInterface(): ICRPStakingInterface {
    return new utils.Interface(_abi) as ICRPStakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ICRPStaking {
    return new Contract(address, _abi, signerOrProvider) as ICRPStaking;
  }
}
