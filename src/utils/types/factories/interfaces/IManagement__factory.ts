/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IManagement,
  IManagementInterface,
} from "../../interfaces/IManagement";

const _abi = [
  {
    inputs: [],
    name: "Management__AddressNotCreator",
    type: "error",
  },
  {
    inputs: [],
    name: "Management__CannotSetAddressForETH",
    type: "error",
  },
  {
    inputs: [],
    name: "Management__CreatorCorrupted",
    type: "error",
  },
  {
    inputs: [],
    name: "Management__FundMaxSupplyIs0",
    type: "error",
  },
  {
    inputs: [],
    name: "Management__InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "Management__InvalidCollection",
    type: "error",
  },
  {
    inputs: [],
    name: "Management__InvalidName",
    type: "error",
  },
  {
    inputs: [],
    name: "Management__InvalidSymbol",
    type: "error",
  },
  {
    inputs: [],
    name: "Management__NotAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "Management__NotCollectionCreator",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "collection",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "ArtCollection",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "staking",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "CRPStaking",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "collection",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "set",
        type: "bool",
      },
    ],
    name: "CollectionSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "manager",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "corrupted",
        type: "bool",
      },
    ],
    name: "CorruptedAddressSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
      {
        indexed: true,
        internalType: "address",
        name: "manager",
        type: "address",
      },
    ],
    name: "CreatorSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "collection",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address",
      },
    ],
    name: "CreatorsCollection",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "fundCollection",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "artCollection",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "Crowdfund",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "setManager",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
      {
        indexed: true,
        internalType: "address",
        name: "manager",
        type: "address",
      },
    ],
    name: "ManagerSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "manager",
        type: "address",
      },
    ],
    name: "NewBeaconAdminArt",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "manager",
        type: "address",
      },
    ],
    name: "NewBeaconAdminCreators",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "manager",
        type: "address",
      },
    ],
    name: "NewBeaconAdminFund",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "manager",
        type: "address",
      },
    ],
    name: "NewBeaconAdminStaking",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "multisig",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "manager",
        type: "address",
      },
    ],
    name: "NewMultiSig",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "proxy",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "manager",
        type: "address",
      },
    ],
    name: "NewProxyReward",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "manager",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "enum IManagement.Coin",
        name: "coin",
        type: "uint8",
      },
    ],
    name: "TokenContractSet",
    type: "event",
  },
  {
    inputs: [],
    name: "getBeaconAdminArt",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBeaconAdminCreators",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBeaconAdminFund",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBeaconAdminStaking",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "collection",
        type: "address",
      },
    ],
    name: "getCollections",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "getCreator",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "escrow",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isAllowed",
            type: "bool",
          },
        ],
        internalType: "struct IManagement.Creator",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "creator",
        type: "address",
      },
    ],
    name: "getIsCorrupted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "getManagers",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMultiSig",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getProxyReward",
    outputs: [
      {
        internalType: "contract ICRPReward",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "collection",
        type: "address",
      },
    ],
    name: "getStakingCollections",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IManagement.Coin",
        name: "coin",
        type: "uint8",
      },
    ],
    name: "getTokenContract",
    outputs: [
      {
        internalType: "contract IERC20Burnable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "beaconAdminArt",
        type: "address",
      },
      {
        internalType: "address",
        name: "beaconAdminFund",
        type: "address",
      },
      {
        internalType: "address",
        name: "beaconAdminCreators",
        type: "address",
      },
      {
        internalType: "address",
        name: "erc20USD",
        type: "address",
      },
      {
        internalType: "address",
        name: "multiSig",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "maxSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "priceInUSD",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "priceInCreatorsCoin",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "baseURI",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "royalty",
        type: "uint256",
      },
    ],
    name: "newArtCollection",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "maxSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "priceInUSD",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "priceInCreatorsCoin",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "baseURI",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "royalty",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "newArtCollection",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stakingToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "timeUnit",
        type: "uint256",
      },
      {
        internalType: "uint256[3]",
        name: "rewardsPerUnitTime",
        type: "uint256[3]",
      },
    ],
    name: "newCRPStaking",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stakingToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "timeUnit",
        type: "uint256",
      },
      {
        internalType: "uint256[3]",
        name: "rewardsPerUnitTime",
        type: "uint256[3]",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "newCRPStaking",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "maxSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "priceInUSDC",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "priceInCreatorsCoin",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "baseURI",
        type: "string",
      },
    ],
    name: "newCreatorsCollection",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "string",
        name: "baseURI",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "royalty",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256[3]",
            name: "valuesLowQuota",
            type: "uint256[3]",
          },
          {
            internalType: "uint256[3]",
            name: "valuesRegQuota",
            type: "uint256[3]",
          },
          {
            internalType: "uint256[3]",
            name: "valuesHighQuota",
            type: "uint256[3]",
          },
          {
            internalType: "uint256",
            name: "amountLowQuota",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountRegQuota",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountHighQuota",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "donationReceiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "donationFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minSoldRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "crowdfundDuration",
            type: "uint256",
          },
        ],
        internalType: "struct IManagement.CrowdFundParams",
        name: "cfParams",
        type: "tuple",
      },
    ],
    name: "newCrowdfund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "string",
        name: "baseURI",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "royalty",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256[3]",
            name: "valuesLowQuota",
            type: "uint256[3]",
          },
          {
            internalType: "uint256[3]",
            name: "valuesRegQuota",
            type: "uint256[3]",
          },
          {
            internalType: "uint256[3]",
            name: "valuesHighQuota",
            type: "uint256[3]",
          },
          {
            internalType: "uint256",
            name: "amountLowQuota",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountRegQuota",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountHighQuota",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "donationReceiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "donationFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minSoldRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "crowdfundDuration",
            type: "uint256",
          },
        ],
        internalType: "struct IManagement.CrowdFundParams",
        name: "cfParams",
        type: "tuple",
      },
    ],
    name: "newCrowdfund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "setBeaconAdminArt",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "setBeaconAdminCreators",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "setBeaconAdminFund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "setBeaconAdminStaking",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "collection",
        type: "address",
      },
      {
        internalType: "bool",
        name: "set",
        type: "bool",
      },
    ],
    name: "setCollections",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "corrupted",
        type: "bool",
      },
    ],
    name: "setCorrupted",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "setCreator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "manager",
        type: "address",
      },
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "setManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "multisig",
        type: "address",
      },
    ],
    name: "setMultiSig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "proxy",
        type: "address",
      },
    ],
    name: "setProxyReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IManagement.Coin",
        name: "coin",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "setTokenContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IManagement__factory {
  static readonly abi = _abi;
  static createInterface(): IManagementInterface {
    return new utils.Interface(_abi) as IManagementInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IManagement {
    return new Contract(address, _abi, signerOrProvider) as IManagement;
  }
}
