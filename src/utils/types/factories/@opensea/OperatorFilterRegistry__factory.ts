/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  OperatorFilterRegistry,
  OperatorFilterRegistryInterface,
} from "../../@opensea/OperatorFilterRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "AddressAlreadyFiltered",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "filtered",
        type: "address",
      },
    ],
    name: "AddressFiltered",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "AddressNotFiltered",
    type: "error",
  },
  {
    inputs: [],
    name: "AlreadyRegistered",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "subscription",
        type: "address",
      },
    ],
    name: "AlreadySubscribed",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotCopyFromSelf",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotFilterEOAs",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
    ],
    name: "CannotSubscribeToRegistrantWithSubscription",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotSubscribeToSelf",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotSubscribeToZeroAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "subscription",
        type: "address",
      },
    ],
    name: "CannotUpdateWhileSubscribed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "codeHash",
        type: "bytes32",
      },
    ],
    name: "CodeHashAlreadyFiltered",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "codeHash",
        type: "bytes32",
      },
    ],
    name: "CodeHashFiltered",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "codeHash",
        type: "bytes32",
      },
    ],
    name: "CodeHashNotFiltered",
    type: "error",
  },
  {
    inputs: [],
    name: "NotOwnable",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
    ],
    name: "NotRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "NotSubscribed",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyAddressOrOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "registrant",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "codeHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "filtered",
        type: "bool",
      },
    ],
    name: "CodeHashUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "registrant",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32[]",
        name: "codeHashes",
        type: "bytes32[]",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "filtered",
        type: "bool",
      },
    ],
    name: "CodeHashesUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "registrant",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "filtered",
        type: "bool",
      },
    ],
    name: "OperatorUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "registrant",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "operators",
        type: "address[]",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "filtered",
        type: "bool",
      },
    ],
    name: "OperatorsUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "registrant",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "registered",
        type: "bool",
      },
    ],
    name: "RegistrationUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "registrant",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "subscription",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "subscribed",
        type: "bool",
      },
    ],
    name: "SubscriptionUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "a",
        type: "address",
      },
    ],
    name: "codeHashOf",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
      {
        internalType: "address",
        name: "registrantToCopy",
        type: "address",
      },
    ],
    name: "copyEntriesOf",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "filteredCodeHashAt",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
    ],
    name: "filteredCodeHashes",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "filteredOperatorAt",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
    ],
    name: "filteredOperators",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "codeHash",
        type: "bytes32",
      },
    ],
    name: "isCodeHashFiltered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
      {
        internalType: "address",
        name: "operatorWithCode",
        type: "address",
      },
    ],
    name: "isCodeHashOfFiltered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isOperatorAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isOperatorFiltered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
    ],
    name: "isRegistered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
      {
        internalType: "address",
        name: "registrantToCopy",
        type: "address",
      },
    ],
    name: "registerAndCopyEntries",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
      {
        internalType: "address",
        name: "subscription",
        type: "address",
      },
    ],
    name: "registerAndSubscribe",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
      {
        internalType: "address",
        name: "newSubscription",
        type: "address",
      },
    ],
    name: "subscribe",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "subscriberAt",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
    ],
    name: "subscribers",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
    ],
    name: "subscriptionOf",
    outputs: [
      {
        internalType: "address",
        name: "subscription",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
    ],
    name: "unregister",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
      {
        internalType: "bool",
        name: "copyExistingEntries",
        type: "bool",
      },
    ],
    name: "unsubscribe",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "codeHash",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "filtered",
        type: "bool",
      },
    ],
    name: "updateCodeHash",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "codeHashes",
        type: "bytes32[]",
      },
      {
        internalType: "bool",
        name: "filtered",
        type: "bool",
      },
    ],
    name: "updateCodeHashes",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "filtered",
        type: "bool",
      },
    ],
    name: "updateOperator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registrant",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "operators",
        type: "address[]",
      },
      {
        internalType: "bool",
        name: "filtered",
        type: "bool",
      },
    ],
    name: "updateOperators",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506128a8806100206000396000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c8063712fc00b116100e3578063b314d4141161008c578063c430880511610066578063c4308805146103aa578063c6171134146103bd578063e4aecb54146103d057600080fd5b8063b314d4141461034e578063bbd652c714610361578063c3c5a5471461037c57600080fd5b8063a14584c1116100bd578063a14584c114610307578063a2f367ab1461031a578063a6529eb51461032d57600080fd5b8063712fc00b146102ce5780637d3e3dbe146102e1578063a0af2903146102f457600080fd5b80633f1cc5fa116101455780635745ae281161011f5780635745ae28146102785780635eae3173146102985780636af0c315146102bb57600080fd5b80633f1cc5fa1461023f5780634420e4861461025257806355940e511461026557600080fd5b80632ec2c246116101765780632ec2c246146101ee57806334a0dc10146102015780633c5030bb1461021457600080fd5b8063063298b61461019d5780631e06b4b4146101b257806322fa2762146101c5575b600080fd5b6101b06101ab366004612549565b6103e3565b005b6101b06101c03660046125b0565b6106f6565b6101d86101d33660046125e9565b6108c2565b6040516101e59190612606565b60405180910390f35b6101b06101fc3660046125e9565b610930565b6101b061020f36600461264a565b610b04565b6102276102223660046125e9565b610ce5565b6040516001600160a01b0390911681526020016101e5565b61022761024d36600461267f565b610d4b565b6101b06102603660046125e9565b610dc5565b61022761027336600461267f565b610f17565b61028b6102863660046125e9565b610f39565b6040516101e591906126ab565b6102ab6102a63660046125b0565b610f5d565b60405190151581526020016101e5565b6102ab6102c936600461267f565b610fdd565b6101b06102dc3660046126ec565b611045565b6101b06102ef3660046125b0565b61128e565b6101b06103023660046125b0565b6114fb565b6101b0610315366004612549565b6116ca565b6101b061032836600461272a565b611961565b61034061033b36600461267f565b611b84565b6040519081526020016101e5565b6101b061035c3660046125b0565b611bec565b61034061036f3660046125e9565b6001600160a01b03163f90565b6102ab61038a3660046125e9565b6001600160a01b0390811660009081526002602052604090205416151590565b61028b6103b83660046125e9565b611f39565b6102ab6103cb3660046125b0565b611fa0565b6102ab6103de3660046125b0565b6120ad565b83336001600160a01b038216146104f057806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561044e575060408051601f3d908101601f1916820190925261044b91810190612768565b60015b6104c5573d80801561047c576040519150601f19603f3d011682016040523d82523d6000602084013e610481565b606091505b5080516000036104bd576040517fb2c1414000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b336001600160a01b038216146104ee57604051631f9ebdff60e31b815260040160405180910390fd5b505b6001600160a01b0380861660009081526002602052604090205416806105395760405163bfc6c33760e01b81526001600160a01b03871660048201526024015b60405180910390fd5b856001600160a01b0316816001600160a01b031614610576576040516304af4d6960e01b81526001600160a01b0382166004820152602401610530565b6001600160a01b038616600090815260016020526040902084846106045760005b818110156105fe5760008888838181106105b3576105b3612785565b90506020020135905060006105d1828661211590919063ffffffff16565b9050806105f4576040516308f0e61560e31b815260048101839052602401610530565b5050600101610597565b506106a6565b60005b818110156106a457600088888381811061062357610623612785565b9050602002013590507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470810361066c57604051631eaebd5b60e31b815260040160405180910390fd5b60006106788583612121565b90508061069a57604051620c35f560e91b815260048101839052602401610530565b5050600101610607565b505b841515886001600160a01b03167f34e9f70c5a16a4df2a396cf0cbc4735eb3c7fb6ae40aaa0b34be7720121d1b9689896040516106e492919061279b565b60405180910390a35050505050505050565b81336001600160a01b038216146107ba57806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610761575060408051601f3d908101601f1916820190925261075e91810190612768565b60015b61078f573d80801561047c576040519150601f19603f3d011682016040523d82523d6000602084013e610481565b336001600160a01b038216146107b857604051631f9ebdff60e31b815260040160405180910390fd5b505b816001600160a01b0316836001600160a01b0316036107ec5760405163035956d760e31b815260040160405180910390fd5b6001600160a01b0380841660009081526002602052604090205416806108305760405163bfc6c33760e01b81526001600160a01b0385166004820152602401610530565b836001600160a01b0316816001600160a01b03161461086d576040516304af4d6960e01b81526001600160a01b0382166004820152602401610530565b6001600160a01b0380841660009081526002602052604090205416806108b15760405163bfc6c33760e01b81526001600160a01b0385166004820152602401610530565b6108bb858561212d565b5050505050565b6001600160a01b038082166000818152600260205260409020546060921690811461090f576001600160a01b038116600090815260016020526040902061090890612286565b9392505050565b6001600160a01b038316600090815260016020526040902061090890612286565b80336001600160a01b038216146109f457806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561099b575060408051601f3d908101601f1916820190925261099891810190612768565b60015b6109c9573d80801561047c576040519150601f19603f3d011682016040523d82523d6000602084013e610481565b336001600160a01b038216146109f257604051631f9ebdff60e31b815260040160405180910390fd5b505b6001600160a01b038083166000908152600260205260409020541680610a385760405163bfc6c33760e01b81526001600160a01b0384166004820152602401610530565b826001600160a01b0316816001600160a01b031614610aaf576001600160a01b0381166000908152600360205260409020610a739084612293565b506040516000906001600160a01b0380841691908616907e38c54977604f1a5c0a3604cbbecd0153c81e3131799ead95755e8bb5d5b9e8908490a45b6001600160a01b03831660008181526002602052604080822080546001600160a01b0319169055519091907f86d03f430c7616021073d7a71766f632f1ce19f289aa989534d9f4732253eb59908390a3505050565b81336001600160a01b03821614610bc857806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610b6f575060408051601f3d908101601f19168201909252610b6c91810190612768565b60015b610b9d573d80801561047c576040519150601f19603f3d011682016040523d82523d6000602084013e610481565b336001600160a01b03821614610bc657604051631f9ebdff60e31b815260040160405180910390fd5b505b6001600160a01b038084166000908152600260205260409020541680610c0c5760405163bfc6c33760e01b81526001600160a01b0385166004820152602401610530565b836001600160a01b0316816001600160a01b031603610c57576040517f237e6c2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0381166000908152600360205260409020610c799085612293565b506001600160a01b0380851660008181526002602052604080822080546001600160a01b03191684179055519092841691907e38c54977604f1a5c0a3604cbbecd0153c81e3131799ead95755e8bb5d5b9e8908490a48215610cdf57610cdf848261212d565b50505050565b6001600160a01b038082166000908152600260205260409020541680610d295760405163bfc6c33760e01b81526001600160a01b0383166004820152602401610530565b816001600160a01b0316816001600160a01b031603610d46575060005b919050565b6001600160a01b03808316600081815260026020526040812054909216908114610d99576001600160a01b0381166000908152602081905260409020610d9190846122a8565b915050610dbf565b6001600160a01b0384166000908152602081905260409020610dbb90846122a8565b9150505b92915050565b80336001600160a01b03821614610e8957806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610e30575060408051601f3d908101601f19168201909252610e2d91810190612768565b60015b610e5e573d80801561047c576040519150601f19603f3d011682016040523d82523d6000602084013e610481565b336001600160a01b03821614610e8757604051631f9ebdff60e31b815260040160405180910390fd5b505b6001600160a01b038281166000908152600260205260409020541615610ec257604051630ea075bf60e21b815260040160405180910390fd5b6001600160a01b03821660008181526002602052604080822080546001600160a01b0319168417905551600192917f86d03f430c7616021073d7a71766f632f1ce19f289aa989534d9f4732253eb5991a35050565b6001600160a01b038216600090815260036020526040812061090890836122a8565b6001600160a01b0381166000908152600360205260409020606090610dbf90612286565b6001600160a01b0382811660008181526002602052604081205490928085163f929116908114610fb2576001600160a01b0381166000908152600160205260409020610fa990836122b4565b92505050610dbf565b6001600160a01b0385166000908152600160205260409020610fd490836122b4565b95945050505050565b6001600160a01b03808316600081815260026020526040812054909216908114611023576001600160a01b0381166000908152600160205260409020610d9190846122b4565b6001600160a01b0384166000908152600160205260409020610dbb90846122b4565b82336001600160a01b0382161461110957806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156110b0575060408051601f3d908101601f191682019092526110ad91810190612768565b60015b6110de573d80801561047c576040519150601f19603f3d011682016040523d82523d6000602084013e610481565b336001600160a01b0382161461110757604051631f9ebdff60e31b815260040160405180910390fd5b505b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470830361114957604051631eaebd5b60e31b815260040160405180910390fd5b6001600160a01b03808516600090815260026020526040902054168061118d5760405163bfc6c33760e01b81526001600160a01b0386166004820152602401610530565b846001600160a01b0316816001600160a01b0316146111ca576040516304af4d6960e01b81526001600160a01b0382166004820152602401610530565b6001600160a01b03851660009081526001602052604090208361121c5760006111f38287612115565b905080611216576040516308f0e61560e31b815260048101879052602401610530565b5061124c565b60006112288287612121565b90508061124a57604051620c35f560e91b815260048101879052602401610530565b505b83151585876001600160a01b03167fb8036058bafea884aabc446ca15619fd86f5464a4ad96f64164ad6f77444354d60405160405180910390a4505050505050565b81336001600160a01b0382161461135257806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156112f9575060408051601f3d908101601f191682019092526112f691810190612768565b60015b611327573d80801561047c576040519150601f19603f3d011682016040523d82523d6000602084013e610481565b336001600160a01b0382161461135057604051631f9ebdff60e31b815260040160405180910390fd5b505b6001600160a01b0380841660009081526002602052604090205416801561138c57604051630ea075bf60e21b815260040160405180910390fd5b826001600160a01b0316846001600160a01b0316036113be5760405163347f118f60e01b815260040160405180910390fd5b6001600160a01b0380841660009081526002602052604090205416806114025760405163bfc6c33760e01b81526001600160a01b0385166004820152602401610530565b836001600160a01b0316816001600160a01b03161461143f57604051631da3952760e21b81526001600160a01b0385166004820152602401610530565b6001600160a01b03858116600090815260026020908152604080832080546001600160a01b0319169489169485179055928252600390522061148190866122cc565b506040516001906001600160a01b038716907f86d03f430c7616021073d7a71766f632f1ce19f289aa989534d9f4732253eb5990600090a36040516001906001600160a01b0380871691908816907e38c54977604f1a5c0a3604cbbecd0153c81e3131799ead95755e8bb5d5b9e890600090a45050505050565b81336001600160a01b038216146115bf57806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611566575060408051601f3d908101601f1916820190925261156391810190612768565b60015b611594573d80801561047c576040519150601f19603f3d011682016040523d82523d6000602084013e610481565b336001600160a01b038216146115bd57604051631f9ebdff60e31b815260040160405180910390fd5b505b826001600160a01b0316826001600160a01b0316036115f15760405163035956d760e31b815260040160405180910390fd5b6001600160a01b0380841660009081526002602052604090205416801561162b57604051630ea075bf60e21b815260040160405180910390fd5b6001600160a01b03808416600090815260026020526040902054168061166f5760405163bfc6c33760e01b81526001600160a01b0385166004820152602401610530565b6001600160a01b03851660008181526002602052604080822080546001600160a01b0319168417905551600192917f86d03f430c7616021073d7a71766f632f1ce19f289aa989534d9f4732253eb5991a36108bb858561212d565b83336001600160a01b0382161461178e57806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611735575060408051601f3d908101601f1916820190925261173291810190612768565b60015b611763573d80801561047c576040519150601f19603f3d011682016040523d82523d6000602084013e610481565b336001600160a01b0382161461178c57604051631f9ebdff60e31b815260040160405180910390fd5b505b6001600160a01b0380861660009081526002602052604090205416806117d25760405163bfc6c33760e01b81526001600160a01b0387166004820152602401610530565b856001600160a01b0316816001600160a01b03161461180f576040516304af4d6960e01b81526001600160a01b0382166004820152602401610530565b6001600160a01b038616600090815260208190526040902084846118aa5760005b818110156118a457600088888381811061184c5761184c612785565b905060200201602081019061186191906125e9565b9050600061186f8583612293565b90508061189a576040516322a92e0760e11b81526001600160a01b0383166004820152602401610530565b5050600101611830565b50611923565b60005b818110156119215760008888838181106118c9576118c9612785565b90506020020160208101906118de91906125e9565b905060006118ec85836122cc565b905080611917576040516302ed108d60e21b81526001600160a01b0383166004820152602401610530565b50506001016118ad565b505b841515886001600160a01b03167f02b85afdacb82d5512c6f05566b3018677ffcbd7e5f75e498bc64081131cbd6c89896040516106e49291906127ed565b82336001600160a01b03821614611a2557806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156119cc575060408051601f3d908101601f191682019092526119c991810190612768565b60015b6119fa573d80801561047c576040519150601f19603f3d011682016040523d82523d6000602084013e610481565b336001600160a01b03821614611a2357604051631f9ebdff60e31b815260040160405180910390fd5b505b6001600160a01b038085166000908152600260205260409020541680611a695760405163bfc6c33760e01b81526001600160a01b0386166004820152602401610530565b846001600160a01b0316816001600160a01b031614611aa6576040516304af4d6960e01b81526001600160a01b0382166004820152602401610530565b6001600160a01b038516600090815260208190526040902083611b00576000611acf8287612293565b905080611afa576040516322a92e0760e11b81526001600160a01b0387166004820152602401610530565b50611b39565b6000611b0c82876122cc565b905080611b37576040516302ed108d60e21b81526001600160a01b0387166004820152602401610530565b505b831515856001600160a01b0316876001600160a01b03167f2738289d9deecdc30eb8ffc42876633caecca1ffa166e4efa89f408e17373a1a60405160405180910390a4505050505050565b6001600160a01b03808316600081815260026020526040812054909216908114611bca576001600160a01b0381166000908152600160205260409020610d9190846122a8565b6001600160a01b0384166000908152600160205260409020610dbb90846122a8565b81336001600160a01b03821614611cb057806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611c57575060408051601f3d908101601f19168201909252611c5491810190612768565b60015b611c85573d80801561047c576040519150601f19603f3d011682016040523d82523d6000602084013e610481565b336001600160a01b03821614611cae57604051631f9ebdff60e31b815260040160405180910390fd5b505b816001600160a01b0316836001600160a01b031603611ce25760405163347f118f60e01b815260040160405180910390fd5b6001600160a01b038216611d22576040517fb05574d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038084166000908152600260205260409020541680611d665760405163bfc6c33760e01b81526001600160a01b0385166004820152602401610530565b826001600160a01b0316816001600160a01b031603611dbc576040517f73a416490000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610530565b6001600160a01b038084166000908152600260205260409020541680611e005760405163bfc6c33760e01b81526001600160a01b0385166004820152602401610530565b836001600160a01b0316816001600160a01b031614611e3d57604051631da3952760e21b81526001600160a01b0385166004820152602401610530565b846001600160a01b0316826001600160a01b031614611eb4576001600160a01b0382166000908152600360205260409020611e789086612293565b506040516000906001600160a01b0380851691908816907e38c54977604f1a5c0a3604cbbecd0153c81e3131799ead95755e8bb5d5b9e8908490a45b6001600160a01b03858116600090815260026020908152604080832080546001600160a01b03191694891694851790559282526003905220611ef690866122cc565b506040516001906001600160a01b0380871691908816907e38c54977604f1a5c0a3604cbbecd0153c81e3131799ead95755e8bb5d5b9e890600090a45050505050565b6001600160a01b0380821660008181526002602052604090205460609216908114611f7f576001600160a01b038116600090815260208190526040902061090890612286565b6001600160a01b038316600090815260208190526040902061090890612286565b6001600160a01b0380831660009081526002602052604081205490911680156120a3576001600160a01b0381166000908152602081815260408083206001909252909120611fee82866122e1565b15612030576040517fa8cf495d0000000000000000000000000000000000000000000000000000000081526001600160a01b0386166004820152602401610530565b6001600160a01b0385163b156120a0576001600160a01b0385163f61205582826122b4565b1561209e576040517f5f3853a90000000000000000000000000000000000000000000000000000000081526001600160a01b038716600482015260248101829052604401610530565b505b50505b5060019392505050565b6001600160a01b038083166000818152600260205260408120549092169081146120f3576001600160a01b0381166000908152602081905260409020610d9190846122e1565b6001600160a01b0384166000908152602081905260409020610dbb90846122e1565b60006109088383612303565b600061090883836123f6565b6001600160a01b03811660009081526020818152604080832060019092528220909161215883612445565b9050600061216583612445565b905060005b828110156121f357600061217e86836122a8565b6001600160a01b0389166000908152602081905260408120919250906121a490836122cc565b905080156121e9576040516001906001600160a01b0380851691908c16907f2738289d9deecdc30eb8ffc42876633caecca1ffa166e4efa89f408e17373a1a90600090a45b505060010161216a565b5060005b8181101561227d57600061220b85836122a8565b6001600160a01b0389166000908152600160205260408120919250906122319083612121565b905080156122735760405160019083906001600160a01b038c16907fb8036058bafea884aabc446ca15619fd86f5464a4ad96f64164ad6f77444354d90600090a45b50506001016121f7565b50505050505050565b606060006109088361244f565b6000610908836001600160a01b038416612303565b600061090883836124ab565b60008181526001830160205260408120541515610908565b6000610908836001600160a01b0384166123f6565b6001600160a01b03811660009081526001830160205260408120541515610908565b600081815260018301602052604081205480156123ec57600061232760018361283b565b855490915060009061233b9060019061283b565b90508181146123a057600086600001828154811061235b5761235b612785565b906000526020600020015490508087600001848154811061237e5761237e612785565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806123b1576123b161285c565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610dbf565b6000915050610dbf565b600081815260018301602052604081205461243d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610dbf565b506000610dbf565b6000610dbf825490565b60608160000180548060200260200160405190810160405280929190818152602001828054801561249f57602002820191906000526020600020905b81548152602001906001019080831161248b575b50505050509050919050565b60008260000182815481106124c2576124c2612785565b9060005260206000200154905092915050565b6001600160a01b03811681146124ea57600080fd5b50565b60008083601f8401126124ff57600080fd5b50813567ffffffffffffffff81111561251757600080fd5b6020830191508360208260051b850101111561253257600080fd5b9250929050565b80358015158114610d4657600080fd5b6000806000806060858703121561255f57600080fd5b843561256a816124d5565b9350602085013567ffffffffffffffff81111561258657600080fd5b612592878288016124ed565b90945092506125a5905060408601612539565b905092959194509250565b600080604083850312156125c357600080fd5b82356125ce816124d5565b915060208301356125de816124d5565b809150509250929050565b6000602082840312156125fb57600080fd5b8135610908816124d5565b6020808252825182820181905260009190848201906040850190845b8181101561263e57835183529284019291840191600101612622565b50909695505050505050565b6000806040838503121561265d57600080fd5b8235612668816124d5565b915061267660208401612539565b90509250929050565b6000806040838503121561269257600080fd5b823561269d816124d5565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b8181101561263e5783516001600160a01b0316835292840192918401916001016126c7565b60008060006060848603121561270157600080fd5b833561270c816124d5565b92506020840135915061272160408501612539565b90509250925092565b60008060006060848603121561273f57600080fd5b833561274a816124d5565b9250602084013561275a816124d5565b915061272160408501612539565b60006020828403121561277a57600080fd5b8151610908816124d5565b634e487b7160e01b600052603260045260246000fd5b6020815281602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156127d457600080fd5b8260051b80856040850137919091016040019392505050565b60208082528181018390526000908460408401835b86811015612830578235612815816124d5565b6001600160a01b031682529183019190830190600101612802565b509695505050505050565b81810381811115610dbf57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220e333656b3b68089ab2ed3651d91fffd3e0985791ee07e3f821b543b7741b3e7c64736f6c63430008130033";

type OperatorFilterRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OperatorFilterRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OperatorFilterRegistry__factory extends ContractFactory {
  constructor(...args: OperatorFilterRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OperatorFilterRegistry> {
    return super.deploy(overrides || {}) as Promise<OperatorFilterRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OperatorFilterRegistry {
    return super.attach(address) as OperatorFilterRegistry;
  }
  override connect(signer: Signer): OperatorFilterRegistry__factory {
    return super.connect(signer) as OperatorFilterRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OperatorFilterRegistryInterface {
    return new utils.Interface(_abi) as OperatorFilterRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OperatorFilterRegistry {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as OperatorFilterRegistry;
  }
}
