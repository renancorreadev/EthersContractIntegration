/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IERC721ArtInterface extends utils.Interface {
  functions: {
    "burn(uint256)": FunctionFragment;
    "contractURI()": FunctionFragment;
    "creatorsProSafeTransferFrom(address,address,uint256,uint8)": FunctionFragment;
    "getBaseURI()": FunctionFragment;
    "getCrowdfund()": FunctionFragment;
    "getLastTransfer(uint256)": FunctionFragment;
    "getMaxSupply()": FunctionFragment;
    "getPricePerCoin(uint8)": FunctionFragment;
    "getRoyalty()": FunctionFragment;
    "getTokenPrice(uint256,uint8)": FunctionFragment;
    "initialize(string,string,address,uint256,uint256,uint256,uint256,string,uint256)": FunctionFragment;
    "maxDiscount(address)": FunctionFragment;
    "mint(uint256,uint8,uint256)": FunctionFragment;
    "mintForCrowdfund(uint256[],uint8[],address)": FunctionFragment;
    "mintToAddress(address,uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "price(address)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setCoreSFT(address)": FunctionFragment;
    "setCrowdfund(address)": FunctionFragment;
    "setMaxDiscount(address,uint256)": FunctionFragment;
    "setPrice(uint256,uint8)": FunctionFragment;
    "setRoyalty(uint256)": FunctionFragment;
    "setTokenPrice(uint256,uint256,uint8)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "burn"
      | "contractURI"
      | "creatorsProSafeTransferFrom"
      | "getBaseURI"
      | "getCrowdfund"
      | "getLastTransfer"
      | "getMaxSupply"
      | "getPricePerCoin"
      | "getRoyalty"
      | "getTokenPrice"
      | "initialize"
      | "maxDiscount"
      | "mint"
      | "mintForCrowdfund"
      | "mintToAddress"
      | "pause"
      | "price"
      | "setBaseURI"
      | "setCoreSFT"
      | "setCrowdfund"
      | "setMaxDiscount"
      | "setPrice"
      | "setRoyalty"
      | "setTokenPrice"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creatorsProSafeTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCrowdfund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastTransfer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPricePerCoin",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyalty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDiscount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintForCrowdfund",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintToAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "price",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoreSFT",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCrowdfund",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDiscount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyalty",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenPrice",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorsProSafeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCrowdfund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPricePerCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoyalty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintForCrowdfund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCoreSFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCrowdfund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRoyalty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "CrowdfundSet(address)": EventFragment;
    "MaxDiscountSet(address,uint256)": EventFragment;
    "NewCoreSFTSet(address,address)": EventFragment;
    "OwnerPaymentDone(uint256,address,uint256)": EventFragment;
    "PriceSet(uint256,uint8)": EventFragment;
    "RoyaltiesTransferred(uint256,uint256,uint256,address)": EventFragment;
    "RoyaltySet(uint256)": EventFragment;
    "TokenPriceSet(uint256,uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CrowdfundSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxDiscountSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCoreSFTSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerPaymentDone"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltiesTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenPriceSet"): EventFragment;
}

export interface CrowdfundSetEventObject {
  _crowdfund: string;
}
export type CrowdfundSetEvent = TypedEvent<[string], CrowdfundSetEventObject>;

export type CrowdfundSetEventFilter = TypedEventFilter<CrowdfundSetEvent>;

export interface MaxDiscountSetEventObject {
  token: string;
  discount: BigNumber;
}
export type MaxDiscountSetEvent = TypedEvent<
  [string, BigNumber],
  MaxDiscountSetEventObject
>;

export type MaxDiscountSetEventFilter = TypedEventFilter<MaxDiscountSetEvent>;

export interface NewCoreSFTSetEventObject {
  caller: string;
  _coreSFT: string;
}
export type NewCoreSFTSetEvent = TypedEvent<
  [string, string],
  NewCoreSFTSetEventObject
>;

export type NewCoreSFTSetEventFilter = TypedEventFilter<NewCoreSFTSetEvent>;

export interface OwnerPaymentDoneEventObject {
  tokenId: BigNumber;
  owner: string;
  amount: BigNumber;
}
export type OwnerPaymentDoneEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  OwnerPaymentDoneEventObject
>;

export type OwnerPaymentDoneEventFilter =
  TypedEventFilter<OwnerPaymentDoneEvent>;

export interface PriceSetEventObject {
  newPrice: BigNumber;
  coin: number;
}
export type PriceSetEvent = TypedEvent<
  [BigNumber, number],
  PriceSetEventObject
>;

export type PriceSetEventFilter = TypedEventFilter<PriceSetEvent>;

export interface RoyaltiesTransferredEventObject {
  tokenId: BigNumber;
  creatorsProRoyalty: BigNumber;
  creatorRoyalty: BigNumber;
  fromWallet: string;
}
export type RoyaltiesTransferredEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  RoyaltiesTransferredEventObject
>;

export type RoyaltiesTransferredEventFilter =
  TypedEventFilter<RoyaltiesTransferredEvent>;

export interface RoyaltySetEventObject {
  _royalty: BigNumber;
}
export type RoyaltySetEvent = TypedEvent<[BigNumber], RoyaltySetEventObject>;

export type RoyaltySetEventFilter = TypedEventFilter<RoyaltySetEvent>;

export interface TokenPriceSetEventObject {
  tokenId: BigNumber;
  price: BigNumber;
  coin: number;
}
export type TokenPriceSetEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  TokenPriceSetEventObject
>;

export type TokenPriceSetEventFilter = TypedEventFilter<TokenPriceSetEvent>;

export interface IERC721Art extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC721ArtInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    creatorsProSafeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBaseURI(overrides?: CallOverrides): Promise<[string]>;

    getCrowdfund(overrides?: CallOverrides): Promise<[string]>;

    getLastTransfer(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPricePerCoin(
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoyalty(overrides?: CallOverrides): Promise<[string, BigNumber]>;

    getTokenPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      owner_: PromiseOrValue<string>,
      maxSupply: PromiseOrValue<BigNumberish>,
      price_: PromiseOrValue<BigNumberish>,
      priceInUSD: PromiseOrValue<BigNumberish>,
      priceInCreatorsCoin: PromiseOrValue<BigNumberish>,
      baseURI: PromiseOrValue<string>,
      royalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxDiscount(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mint(
      tokenId: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      discount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintForCrowdfund(
      tokenIds: PromiseOrValue<BigNumberish>[],
      classes: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintToAddress(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    price(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setBaseURI(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCoreSFT(
      coreSFT_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCrowdfund(
      crowdfund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxDiscount(
      token: PromiseOrValue<string>,
      maxDiscount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrice(
      price: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoyalty(
      royalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  burn(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  creatorsProSafeTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    coin: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBaseURI(overrides?: CallOverrides): Promise<string>;

  getCrowdfund(overrides?: CallOverrides): Promise<string>;

  getLastTransfer(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getPricePerCoin(
    coin: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoyalty(overrides?: CallOverrides): Promise<[string, BigNumber]>;

  getTokenPrice(
    tokenId: PromiseOrValue<BigNumberish>,
    coin: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    owner_: PromiseOrValue<string>,
    maxSupply: PromiseOrValue<BigNumberish>,
    price_: PromiseOrValue<BigNumberish>,
    priceInUSD: PromiseOrValue<BigNumberish>,
    priceInCreatorsCoin: PromiseOrValue<BigNumberish>,
    baseURI: PromiseOrValue<string>,
    royalty: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxDiscount(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mint(
    tokenId: PromiseOrValue<BigNumberish>,
    coin: PromiseOrValue<BigNumberish>,
    discount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintForCrowdfund(
    tokenIds: PromiseOrValue<BigNumberish>[],
    classes: PromiseOrValue<BigNumberish>[],
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintToAddress(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  price(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setBaseURI(
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCoreSFT(
    coreSFT_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCrowdfund(
    crowdfund: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxDiscount(
    token: PromiseOrValue<string>,
    maxDiscount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrice(
    price: PromiseOrValue<BigNumberish>,
    coin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoyalty(
    royalty: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenPrice(
    tokenId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    coin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    creatorsProSafeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBaseURI(overrides?: CallOverrides): Promise<string>;

    getCrowdfund(overrides?: CallOverrides): Promise<string>;

    getLastTransfer(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getPricePerCoin(
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoyalty(overrides?: CallOverrides): Promise<[string, BigNumber]>;

    getTokenPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      owner_: PromiseOrValue<string>,
      maxSupply: PromiseOrValue<BigNumberish>,
      price_: PromiseOrValue<BigNumberish>,
      priceInUSD: PromiseOrValue<BigNumberish>,
      priceInCreatorsCoin: PromiseOrValue<BigNumberish>,
      baseURI: PromiseOrValue<string>,
      royalty: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxDiscount(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      tokenId: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      discount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintForCrowdfund(
      tokenIds: PromiseOrValue<BigNumberish>[],
      classes: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintToAddress(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    price(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBaseURI(
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCoreSFT(
      coreSFT_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCrowdfund(
      crowdfund: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDiscount(
      token: PromiseOrValue<string>,
      maxDiscount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrice(
      price: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyalty(
      royalty: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CrowdfundSet(address)"(
      _crowdfund?: PromiseOrValue<string> | null
    ): CrowdfundSetEventFilter;
    CrowdfundSet(
      _crowdfund?: PromiseOrValue<string> | null
    ): CrowdfundSetEventFilter;

    "MaxDiscountSet(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      discount?: null
    ): MaxDiscountSetEventFilter;
    MaxDiscountSet(
      token?: PromiseOrValue<string> | null,
      discount?: null
    ): MaxDiscountSetEventFilter;

    "NewCoreSFTSet(address,address)"(
      caller?: PromiseOrValue<string> | null,
      _coreSFT?: null
    ): NewCoreSFTSetEventFilter;
    NewCoreSFTSet(
      caller?: PromiseOrValue<string> | null,
      _coreSFT?: null
    ): NewCoreSFTSetEventFilter;

    "OwnerPaymentDone(uint256,address,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      amount?: null
    ): OwnerPaymentDoneEventFilter;
    OwnerPaymentDone(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      amount?: null
    ): OwnerPaymentDoneEventFilter;

    "PriceSet(uint256,uint8)"(
      newPrice?: PromiseOrValue<BigNumberish> | null,
      coin?: PromiseOrValue<BigNumberish> | null
    ): PriceSetEventFilter;
    PriceSet(
      newPrice?: PromiseOrValue<BigNumberish> | null,
      coin?: PromiseOrValue<BigNumberish> | null
    ): PriceSetEventFilter;

    "RoyaltiesTransferred(uint256,uint256,uint256,address)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      creatorsProRoyalty?: null,
      creatorRoyalty?: null,
      fromWallet?: null
    ): RoyaltiesTransferredEventFilter;
    RoyaltiesTransferred(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      creatorsProRoyalty?: null,
      creatorRoyalty?: null,
      fromWallet?: null
    ): RoyaltiesTransferredEventFilter;

    "RoyaltySet(uint256)"(_royalty?: null): RoyaltySetEventFilter;
    RoyaltySet(_royalty?: null): RoyaltySetEventFilter;

    "TokenPriceSet(uint256,uint256,uint8)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      coin?: PromiseOrValue<BigNumberish> | null
    ): TokenPriceSetEventFilter;
    TokenPriceSet(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      coin?: PromiseOrValue<BigNumberish> | null
    ): TokenPriceSetEventFilter;
  };

  estimateGas: {
    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    creatorsProSafeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBaseURI(overrides?: CallOverrides): Promise<BigNumber>;

    getCrowdfund(overrides?: CallOverrides): Promise<BigNumber>;

    getLastTransfer(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getPricePerCoin(
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoyalty(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      owner_: PromiseOrValue<string>,
      maxSupply: PromiseOrValue<BigNumberish>,
      price_: PromiseOrValue<BigNumberish>,
      priceInUSD: PromiseOrValue<BigNumberish>,
      priceInCreatorsCoin: PromiseOrValue<BigNumberish>,
      baseURI: PromiseOrValue<string>,
      royalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxDiscount(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      tokenId: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      discount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintForCrowdfund(
      tokenIds: PromiseOrValue<BigNumberish>[],
      classes: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintToAddress(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    price(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBaseURI(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCoreSFT(
      coreSFT_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCrowdfund(
      crowdfund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxDiscount(
      token: PromiseOrValue<string>,
      maxDiscount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrice(
      price: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoyalty(
      royalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creatorsProSafeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBaseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCrowdfund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastTransfer(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPricePerCoin(
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoyalty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      owner_: PromiseOrValue<string>,
      maxSupply: PromiseOrValue<BigNumberish>,
      price_: PromiseOrValue<BigNumberish>,
      priceInUSD: PromiseOrValue<BigNumberish>,
      priceInCreatorsCoin: PromiseOrValue<BigNumberish>,
      baseURI: PromiseOrValue<string>,
      royalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxDiscount(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      tokenId: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      discount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintForCrowdfund(
      tokenIds: PromiseOrValue<BigNumberish>[],
      classes: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintToAddress(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    price(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCoreSFT(
      coreSFT_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCrowdfund(
      crowdfund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxDiscount(
      token: PromiseOrValue<string>,
      maxDiscount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrice(
      price: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoyalty(
      royalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
