/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IEscrow {
  export type DepositStruct = {
    amount: PromiseOrValue<BigNumberish>;
    endTimestamp: PromiseOrValue<BigNumberish>;
    coin: PromiseOrValue<BigNumberish>;
  };

  export type DepositStructOutput = [BigNumber, BigNumber, number] & {
    amount: BigNumber;
    endTimestamp: BigNumber;
    coin: number;
  };
}

export interface IEscrowInterface extends utils.Interface {
  functions: {
    "deposit(uint256,address,uint8)": FunctionFragment;
    "depositOf(uint256)": FunctionFragment;
    "getAllAvailableDeposits()": FunctionFragment;
    "getNextDepositId()": FunctionFragment;
    "getNextDepositIdToWithdraw()": FunctionFragment;
    "refundNFT(address,uint256,uint256,uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawByManager(uint256,uint256)": FunctionFragment;
    "withdrawByManager()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deposit"
      | "depositOf"
      | "getAllAvailableDeposits"
      | "getNextDepositId"
      | "getNextDepositIdToWithdraw"
      | "refundNFT"
      | "withdraw"
      | "withdrawByManager(uint256,uint256)"
      | "withdrawByManager()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAvailableDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextDepositId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextDepositIdToWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundNFT",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawByManager(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawByManager()",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllAvailableDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextDepositId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextDepositIdToWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refundNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawByManager(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawByManager()",
    data: BytesLike
  ): Result;

  events: {
    "Deposited(address,address,uint256,uint256)": EventFragment;
    "NFTRefunded(address,address,uint256)": EventFragment;
    "Withdrawn(uint256,uint256)": EventFragment;
    "WithdrawnByManager(address,uint256,uint8,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTRefunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnByManager"): EventFragment;
}

export interface DepositedEventObject {
  manager: string;
  payer: string;
  weiAmount: BigNumber;
  endTimestamp: BigNumber;
}
export type DepositedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface NFTRefundedEventObject {
  caller: string;
  collection: string;
  tokenId: BigNumber;
}
export type NFTRefundedEvent = TypedEvent<
  [string, string, BigNumber],
  NFTRefundedEventObject
>;

export type NFTRefundedEventFilter = TypedEventFilter<NFTRefundedEvent>;

export interface WithdrawnEventObject {
  startDepositId: BigNumber;
  endDepositId: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [BigNumber, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface WithdrawnByManagerEventObject {
  manager: string;
  amount: BigNumber;
  coin: number;
  withdrawnAll: boolean;
}
export type WithdrawnByManagerEvent = TypedEvent<
  [string, BigNumber, number, boolean],
  WithdrawnByManagerEventObject
>;

export type WithdrawnByManagerEventFilter =
  TypedEventFilter<WithdrawnByManagerEvent>;

export interface IEscrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      _payer: PromiseOrValue<string>,
      _coin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositOf(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IEscrow.DepositStructOutput]>;

    getAllAvailableDeposits(
      overrides?: CallOverrides
    ): Promise<[IEscrow.DepositStructOutput[]]>;

    getNextDepositId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNextDepositIdToWithdraw(overrides?: CallOverrides): Promise<[BigNumber]>;

    refundNFT(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawByManager(uint256,uint256)"(
      _depositId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawByManager()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  deposit(
    _amount: PromiseOrValue<BigNumberish>,
    _payer: PromiseOrValue<string>,
    _coin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositOf(
    depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IEscrow.DepositStructOutput>;

  getAllAvailableDeposits(
    overrides?: CallOverrides
  ): Promise<IEscrow.DepositStructOutput[]>;

  getNextDepositId(overrides?: CallOverrides): Promise<BigNumber>;

  getNextDepositIdToWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

  refundNFT(
    _collection: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _depositId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawByManager(uint256,uint256)"(
    _depositId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawByManager()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      _payer: PromiseOrValue<string>,
      _coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositOf(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IEscrow.DepositStructOutput>;

    getAllAvailableDeposits(
      overrides?: CallOverrides
    ): Promise<IEscrow.DepositStructOutput[]>;

    getNextDepositId(overrides?: CallOverrides): Promise<BigNumber>;

    getNextDepositIdToWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    refundNFT(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdrawByManager(uint256,uint256)"(
      _depositId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawByManager()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Deposited(address,address,uint256,uint256)"(
      manager?: PromiseOrValue<string> | null,
      payer?: PromiseOrValue<string> | null,
      weiAmount?: null,
      endTimestamp?: null
    ): DepositedEventFilter;
    Deposited(
      manager?: PromiseOrValue<string> | null,
      payer?: PromiseOrValue<string> | null,
      weiAmount?: null,
      endTimestamp?: null
    ): DepositedEventFilter;

    "NFTRefunded(address,address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): NFTRefundedEventFilter;
    NFTRefunded(
      caller?: PromiseOrValue<string> | null,
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): NFTRefundedEventFilter;

    "Withdrawn(uint256,uint256)"(
      startDepositId?: PromiseOrValue<BigNumberish> | null,
      endDepositId?: PromiseOrValue<BigNumberish> | null
    ): WithdrawnEventFilter;
    Withdrawn(
      startDepositId?: PromiseOrValue<BigNumberish> | null,
      endDepositId?: PromiseOrValue<BigNumberish> | null
    ): WithdrawnEventFilter;

    "WithdrawnByManager(address,uint256,uint8,bool)"(
      manager?: PromiseOrValue<string> | null,
      amount?: null,
      coin?: null,
      withdrawnAll?: PromiseOrValue<boolean> | null
    ): WithdrawnByManagerEventFilter;
    WithdrawnByManager(
      manager?: PromiseOrValue<string> | null,
      amount?: null,
      coin?: null,
      withdrawnAll?: PromiseOrValue<boolean> | null
    ): WithdrawnByManagerEventFilter;
  };

  estimateGas: {
    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      _payer: PromiseOrValue<string>,
      _coin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositOf(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllAvailableDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    getNextDepositId(overrides?: CallOverrides): Promise<BigNumber>;

    getNextDepositIdToWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    refundNFT(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawByManager(uint256,uint256)"(
      _depositId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawByManager()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      _payer: PromiseOrValue<string>,
      _coin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositOf(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllAvailableDeposits(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextDepositId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextDepositIdToWithdraw(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refundNFT(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawByManager(uint256,uint256)"(
      _depositId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawByManager()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
