/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ICRPReward {
  export type RewardConditionStruct = {
    timeUnit: PromiseOrValue<BigNumberish>;
    rewardsPerUnitTime: PromiseOrValue<BigNumberish>;
    startTimestamp: PromiseOrValue<BigNumberish>;
    endTimestamp: PromiseOrValue<BigNumberish>;
  };

  export type RewardConditionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    timeUnit: BigNumber;
    rewardsPerUnitTime: BigNumber;
    startTimestamp: BigNumber;
    endTimestamp: BigNumber;
  };

  export type TokenInfoStruct = {
    index: PromiseOrValue<BigNumberish>;
    hashpower: PromiseOrValue<BigNumberish>;
    characteristId: PromiseOrValue<BigNumberish>;
  };

  export type TokenInfoStructOutput = [BigNumber, BigNumber, BigNumber] & {
    index: BigNumber;
    hashpower: BigNumber;
    characteristId: BigNumber;
  };

  export type UserStruct = {
    index: PromiseOrValue<BigNumberish>;
    score: PromiseOrValue<BigNumberish>;
    points: PromiseOrValue<BigNumberish>;
    timeOfLastUpdate: PromiseOrValue<BigNumberish>;
    unclaimedRewards: PromiseOrValue<BigNumberish>;
    conditionIdOflastUpdate: PromiseOrValue<BigNumberish>;
    collections: PromiseOrValue<string>[];
  };

  export type UserStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string[]
  ] & {
    index: BigNumber;
    score: BigNumber;
    points: BigNumber;
    timeOfLastUpdate: BigNumber;
    unclaimedRewards: BigNumber;
    conditionIdOflastUpdate: BigNumber;
    collections: string[];
  };
}

export interface ICRPRewardInterface extends utils.Interface {
  functions: {
    "claimRewards()": FunctionFragment;
    "getAllTokenIdsPerUser(address,address)": FunctionFragment;
    "getCollectionIndex(address,address)": FunctionFragment;
    "getCurrentRewardCondition()": FunctionFragment;
    "getHashObject(address,uint256)": FunctionFragment;
    "getImplementation()": FunctionFragment;
    "getInteracPointsPrecision()": FunctionFragment;
    "getMaxRewardClaim()": FunctionFragment;
    "getNextConditionId()": FunctionFragment;
    "getRewardCondition(uint256)": FunctionFragment;
    "getTokenIdsPerUser(address,address,uint256)": FunctionFragment;
    "getTokenInfo(address,uint256)": FunctionFragment;
    "getUnclaimedRewards(address)": FunctionFragment;
    "getUser(address)": FunctionFragment;
    "getUserUpdated(address)": FunctionFragment;
    "getUsersArray(uint256)": FunctionFragment;
    "initialize(address,uint256,uint256,uint256[3],uint256)": FunctionFragment;
    "removeToken(address,uint256,bool)": FunctionFragment;
    "setHashObject(address,uint256[],uint256[],uint256[])": FunctionFragment;
    "setInteracPointsPrecision(uint256[3])": FunctionFragment;
    "setMaxRewardClaim(uint256)": FunctionFragment;
    "setPoints(address,uint256,uint256,uint8,bool)": FunctionFragment;
    "setRewardCondition(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimRewards"
      | "getAllTokenIdsPerUser"
      | "getCollectionIndex"
      | "getCurrentRewardCondition"
      | "getHashObject"
      | "getImplementation"
      | "getInteracPointsPrecision"
      | "getMaxRewardClaim"
      | "getNextConditionId"
      | "getRewardCondition"
      | "getTokenIdsPerUser"
      | "getTokenInfo"
      | "getUnclaimedRewards"
      | "getUser"
      | "getUserUpdated"
      | "getUsersArray"
      | "initialize"
      | "removeToken"
      | "setHashObject"
      | "setInteracPointsPrecision"
      | "setMaxRewardClaim"
      | "setPoints"
      | "setRewardCondition"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTokenIdsPerUser",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRewardCondition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHashObject",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInteracPointsPrecision",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxRewardClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextConditionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardCondition",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenIdsPerUser",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnclaimedRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserUpdated",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUsersArray",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setHashObject",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setInteracPointsPrecision",
    values: [
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxRewardClaim",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoints",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardCondition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTokenIdsPerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRewardCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHashObject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInteracPointsPrecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxRewardClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextConditionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenIdsPerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnclaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsersArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHashObject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInteracPointsPrecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxRewardClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPoints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardCondition",
    data: BytesLike
  ): Result;

  events: {
    "HashObjectSet(address,address,uint256[],uint256[],uint256[])": EventFragment;
    "InteracPointsPrecisionSet(address,uint256[3])": EventFragment;
    "MaxRewardClaimSet(address,uint256)": EventFragment;
    "NewRewardCondition(address,uint256,uint256)": EventFragment;
    "PointsSet(address,uint256,uint256,uint256,uint256)": EventFragment;
    "RewardsClaimed(address,uint256)": EventFragment;
    "TokenRemoved(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HashObjectSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InteracPointsPrecisionSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxRewardClaimSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRewardCondition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PointsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRemoved"): EventFragment;
}

export interface HashObjectSetEventObject {
  manager: string;
  collection: string;
  tokenId: BigNumber[];
  hashpower: BigNumber[];
  characteristId: BigNumber[];
}
export type HashObjectSetEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber[], BigNumber[]],
  HashObjectSetEventObject
>;

export type HashObjectSetEventFilter = TypedEventFilter<HashObjectSetEvent>;

export interface InteracPointsPrecisionSetEventObject {
  manager: string;
  precision: [BigNumber, BigNumber, BigNumber];
}
export type InteracPointsPrecisionSetEvent = TypedEvent<
  [string, [BigNumber, BigNumber, BigNumber]],
  InteracPointsPrecisionSetEventObject
>;

export type InteracPointsPrecisionSetEventFilter =
  TypedEventFilter<InteracPointsPrecisionSetEvent>;

export interface MaxRewardClaimSetEventObject {
  manager: string;
  maxRewardClaim: BigNumber;
}
export type MaxRewardClaimSetEvent = TypedEvent<
  [string, BigNumber],
  MaxRewardClaimSetEventObject
>;

export type MaxRewardClaimSetEventFilter =
  TypedEventFilter<MaxRewardClaimSetEvent>;

export interface NewRewardConditionEventObject {
  caller: string;
  timeUnit: BigNumber;
  rewardsPerUnitTime: BigNumber;
}
export type NewRewardConditionEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  NewRewardConditionEventObject
>;

export type NewRewardConditionEventFilter =
  TypedEventFilter<NewRewardConditionEvent>;

export interface PointsSetEventObject {
  user: string;
  tokenId: BigNumber;
  hashpower: BigNumber;
  points: BigNumber;
  amountPaid: BigNumber;
}
export type PointsSetEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  PointsSetEventObject
>;

export type PointsSetEventFilter = TypedEventFilter<PointsSetEvent>;

export interface RewardsClaimedEventObject {
  caller: string;
  amount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface TokenRemovedEventObject {
  user: string;
  tokenId: BigNumber;
}
export type TokenRemovedEvent = TypedEvent<
  [string, BigNumber],
  TokenRemovedEventObject
>;

export type TokenRemovedEventFilter = TypedEventFilter<TokenRemovedEvent>;

export interface ICRPReward extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICRPRewardInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllTokenIdsPerUser(
      user: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getCollectionIndex(
      user: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentRewardCondition(
      overrides?: CallOverrides
    ): Promise<[ICRPReward.RewardConditionStructOutput]>;

    getHashObject(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getImplementation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getInteracPointsPrecision(
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber, BigNumber]]>;

    getMaxRewardClaim(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNextConditionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardCondition(
      conditionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ICRPReward.RewardConditionStructOutput]>;

    getTokenIdsPerUser(
      user: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenInfo(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ICRPReward.TokenInfoStructOutput]>;

    getUnclaimedRewards(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUser(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ICRPReward.UserStructOutput]>;

    getUserUpdated(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ICRPReward.UserStructOutput]>;

    getUsersArray(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      management: PromiseOrValue<string>,
      timeUnit: PromiseOrValue<BigNumberish>,
      rewardsPerUnitTime: PromiseOrValue<BigNumberish>,
      interacPoints: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      maxRewardClaim: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeToken(
      user: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      emitEvent: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHashObject(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>[],
      hashPower: PromiseOrValue<BigNumberish>[],
      characteristId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInteracPointsPrecision(
      precision: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxRewardClaim(
      maxRewardClaim: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoints(
      user: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      isSell: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardCondition(
      timeUnit: PromiseOrValue<BigNumberish>,
      rewardsPerUnitTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claimRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllTokenIdsPerUser(
    user: PromiseOrValue<string>,
    collection: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getCollectionIndex(
    user: PromiseOrValue<string>,
    collection: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentRewardCondition(
    overrides?: CallOverrides
  ): Promise<ICRPReward.RewardConditionStructOutput>;

  getHashObject(
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getImplementation(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getInteracPointsPrecision(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getMaxRewardClaim(overrides?: CallOverrides): Promise<BigNumber>;

  getNextConditionId(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardCondition(
    conditionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ICRPReward.RewardConditionStructOutput>;

  getTokenIdsPerUser(
    user: PromiseOrValue<string>,
    collection: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenInfo(
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ICRPReward.TokenInfoStructOutput>;

  getUnclaimedRewards(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUser(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ICRPReward.UserStructOutput>;

  getUserUpdated(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ICRPReward.UserStructOutput>;

  getUsersArray(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    management: PromiseOrValue<string>,
    timeUnit: PromiseOrValue<BigNumberish>,
    rewardsPerUnitTime: PromiseOrValue<BigNumberish>,
    interacPoints: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    maxRewardClaim: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeToken(
    user: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    emitEvent: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHashObject(
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>[],
    hashPower: PromiseOrValue<BigNumberish>[],
    characteristId: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInteracPointsPrecision(
    precision: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxRewardClaim(
    maxRewardClaim: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoints(
    user: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    coin: PromiseOrValue<BigNumberish>,
    isSell: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardCondition(
    timeUnit: PromiseOrValue<BigNumberish>,
    rewardsPerUnitTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimRewards(overrides?: CallOverrides): Promise<void>;

    getAllTokenIdsPerUser(
      user: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getCollectionIndex(
      user: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentRewardCondition(
      overrides?: CallOverrides
    ): Promise<ICRPReward.RewardConditionStructOutput>;

    getHashObject(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getImplementation(overrides?: CallOverrides): Promise<string>;

    getInteracPointsPrecision(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getMaxRewardClaim(overrides?: CallOverrides): Promise<BigNumber>;

    getNextConditionId(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardCondition(
      conditionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ICRPReward.RewardConditionStructOutput>;

    getTokenIdsPerUser(
      user: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenInfo(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ICRPReward.TokenInfoStructOutput>;

    getUnclaimedRewards(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUser(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ICRPReward.UserStructOutput>;

    getUserUpdated(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ICRPReward.UserStructOutput>;

    getUsersArray(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      management: PromiseOrValue<string>,
      timeUnit: PromiseOrValue<BigNumberish>,
      rewardsPerUnitTime: PromiseOrValue<BigNumberish>,
      interacPoints: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      maxRewardClaim: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeToken(
      user: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      emitEvent: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setHashObject(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>[],
      hashPower: PromiseOrValue<BigNumberish>[],
      characteristId: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setInteracPointsPrecision(
      precision: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxRewardClaim(
      maxRewardClaim: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoints(
      user: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      isSell: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardCondition(
      timeUnit: PromiseOrValue<BigNumberish>,
      rewardsPerUnitTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "HashObjectSet(address,address,uint256[],uint256[],uint256[])"(
      manager?: PromiseOrValue<string> | null,
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish>[] | null,
      hashpower?: null,
      characteristId?: null
    ): HashObjectSetEventFilter;
    HashObjectSet(
      manager?: PromiseOrValue<string> | null,
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish>[] | null,
      hashpower?: null,
      characteristId?: null
    ): HashObjectSetEventFilter;

    "InteracPointsPrecisionSet(address,uint256[3])"(
      manager?: PromiseOrValue<string> | null,
      precision?: null
    ): InteracPointsPrecisionSetEventFilter;
    InteracPointsPrecisionSet(
      manager?: PromiseOrValue<string> | null,
      precision?: null
    ): InteracPointsPrecisionSetEventFilter;

    "MaxRewardClaimSet(address,uint256)"(
      manager?: PromiseOrValue<string> | null,
      maxRewardClaim?: null
    ): MaxRewardClaimSetEventFilter;
    MaxRewardClaimSet(
      manager?: PromiseOrValue<string> | null,
      maxRewardClaim?: null
    ): MaxRewardClaimSetEventFilter;

    "NewRewardCondition(address,uint256,uint256)"(
      caller?: PromiseOrValue<string> | null,
      timeUnit?: null,
      rewardsPerUnitTime?: null
    ): NewRewardConditionEventFilter;
    NewRewardCondition(
      caller?: PromiseOrValue<string> | null,
      timeUnit?: null,
      rewardsPerUnitTime?: null
    ): NewRewardConditionEventFilter;

    "PointsSet(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      hashpower?: null,
      points?: null,
      amountPaid?: null
    ): PointsSetEventFilter;
    PointsSet(
      user?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      hashpower?: null,
      points?: null,
      amountPaid?: null
    ): PointsSetEventFilter;

    "RewardsClaimed(address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      caller?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardsClaimedEventFilter;

    "TokenRemoved(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TokenRemovedEventFilter;
    TokenRemoved(
      user?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TokenRemovedEventFilter;
  };

  estimateGas: {
    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllTokenIdsPerUser(
      user: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollectionIndex(
      user: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentRewardCondition(overrides?: CallOverrides): Promise<BigNumber>;

    getHashObject(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getImplementation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getInteracPointsPrecision(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxRewardClaim(overrides?: CallOverrides): Promise<BigNumber>;

    getNextConditionId(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardCondition(
      conditionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenIdsPerUser(
      user: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenInfo(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnclaimedRewards(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUser(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserUpdated(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUsersArray(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      management: PromiseOrValue<string>,
      timeUnit: PromiseOrValue<BigNumberish>,
      rewardsPerUnitTime: PromiseOrValue<BigNumberish>,
      interacPoints: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      maxRewardClaim: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeToken(
      user: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      emitEvent: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHashObject(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>[],
      hashPower: PromiseOrValue<BigNumberish>[],
      characteristId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInteracPointsPrecision(
      precision: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxRewardClaim(
      maxRewardClaim: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoints(
      user: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      isSell: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardCondition(
      timeUnit: PromiseOrValue<BigNumberish>,
      rewardsPerUnitTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllTokenIdsPerUser(
      user: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollectionIndex(
      user: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentRewardCondition(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHashObject(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getImplementation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getInteracPointsPrecision(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxRewardClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextConditionId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardCondition(
      conditionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenIdsPerUser(
      user: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenInfo(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnclaimedRewards(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUser(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserUpdated(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUsersArray(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      management: PromiseOrValue<string>,
      timeUnit: PromiseOrValue<BigNumberish>,
      rewardsPerUnitTime: PromiseOrValue<BigNumberish>,
      interacPoints: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      maxRewardClaim: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeToken(
      user: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      emitEvent: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHashObject(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>[],
      hashPower: PromiseOrValue<BigNumberish>[],
      characteristId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInteracPointsPrecision(
      precision: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxRewardClaim(
      maxRewardClaim: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoints(
      user: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      isSell: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardCondition(
      timeUnit: PromiseOrValue<BigNumberish>,
      rewardsPerUnitTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
