/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ICrowdfund {
  export type InvestIdInfosStruct = {
    index: PromiseOrValue<BigNumberish>;
    totalPayment: PromiseOrValue<BigNumberish>;
    sevenDaysPeriod: PromiseOrValue<BigNumberish>;
    coin: PromiseOrValue<BigNumberish>;
    investor: PromiseOrValue<string>;
    lowQuotaAmount: PromiseOrValue<BigNumberish>;
    regQuotaAmount: PromiseOrValue<BigNumberish>;
    highQuotaAmount: PromiseOrValue<BigNumberish>;
  };

  export type InvestIdInfosStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    index: BigNumber;
    totalPayment: BigNumber;
    sevenDaysPeriod: BigNumber;
    coin: number;
    investor: string;
    lowQuotaAmount: BigNumber;
    regQuotaAmount: BigNumber;
    highQuotaAmount: BigNumber;
  };

  export type QuotaInfosStruct = {
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
    amount: PromiseOrValue<BigNumberish>;
    bought: PromiseOrValue<BigNumberish>;
    nextTokenId: PromiseOrValue<BigNumberish>;
  };

  export type QuotaInfosStructOutput = [
    [BigNumber, BigNumber, BigNumber],
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    values: [BigNumber, BigNumber, BigNumber];
    amount: BigNumber;
    bought: BigNumber;
    nextTokenId: BigNumber;
  };
}

export interface ICrowdfundInterface extends utils.Interface {
  functions: {
    "donate(uint256,uint8)": FunctionFragment;
    "donateForAddress(address,uint256,uint8)": FunctionFragment;
    "getAllInvestIdsPerInvestor(address)": FunctionFragment;
    "getCollection()": FunctionFragment;
    "getDonationFee()": FunctionFragment;
    "getDonationReceiver()": FunctionFragment;
    "getDueDate()": FunctionFragment;
    "getInvestIdInfos(uint256)": FunctionFragment;
    "getInvestIdsPerInvestor(address,uint256)": FunctionFragment;
    "getMinSoldRate()": FunctionFragment;
    "getNextInvestId()": FunctionFragment;
    "getPaymentsPerCoin(address,uint8)": FunctionFragment;
    "getQuotaInfos(uint8)": FunctionFragment;
    "initialize(uint256[3],uint256[3],uint256[3],uint256,uint256,uint256,address,uint256,uint256,uint256,address)": FunctionFragment;
    "invest(uint256,uint256,uint256,uint8)": FunctionFragment;
    "investForAddress(address,uint256,uint256,uint256,uint8)": FunctionFragment;
    "mint()": FunctionFragment;
    "mint(address)": FunctionFragment;
    "refundAll()": FunctionFragment;
    "refundToAddress(address)": FunctionFragment;
    "refundWithInvestId(uint256)": FunctionFragment;
    "withdrawFund()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "donate"
      | "donateForAddress"
      | "getAllInvestIdsPerInvestor"
      | "getCollection"
      | "getDonationFee"
      | "getDonationReceiver"
      | "getDueDate"
      | "getInvestIdInfos"
      | "getInvestIdsPerInvestor"
      | "getMinSoldRate"
      | "getNextInvestId"
      | "getPaymentsPerCoin"
      | "getQuotaInfos"
      | "initialize"
      | "invest"
      | "investForAddress"
      | "mint()"
      | "mint(address)"
      | "refundAll"
      | "refundToAddress"
      | "refundWithInvestId"
      | "withdrawFund"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "donate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "donateForAddress",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllInvestIdsPerInvestor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDonationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDonationReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDueDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestIdInfos",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestIdsPerInvestor",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinSoldRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextInvestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentsPerCoin",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuotaInfos",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "invest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "investForAddress",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "mint()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "refundAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refundToAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "refundWithInvestId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFund",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donateForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllInvestIdsPerInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonationReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDueDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInvestIdInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestIdsPerInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinSoldRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextInvestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentsPerCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuotaInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mint(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refundAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundWithInvestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFund",
    data: BytesLike
  ): Result;

  events: {
    "CreatorWithdrawed(uint256,uint256,uint256)": EventFragment;
    "DonationSent(address,uint256,uint256,uint256)": EventFragment;
    "DonationTransferred(address,uint256,uint8)": EventFragment;
    "Invested(address,uint256,uint256,uint256,uint256,uint256,uint8)": EventFragment;
    "InvestorMinted(address,address)": EventFragment;
    "RefundedAll(address,uint256,uint256,uint256,uint256[])": EventFragment;
    "RefundedAllToAddress(address,address,uint256,uint256,uint256,uint256[])": EventFragment;
    "RefundedInvestId(address,uint256,uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreatorWithdrawed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DonationSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DonationTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Invested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InvestorMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundedAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundedAllToAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundedInvestId"): EventFragment;
}

export interface CreatorWithdrawedEventObject {
  ETHAmount: BigNumber;
  USDAmount: BigNumber;
  CreatorsCoinAmount: BigNumber;
}
export type CreatorWithdrawedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  CreatorWithdrawedEventObject
>;

export type CreatorWithdrawedEventFilter =
  TypedEventFilter<CreatorWithdrawedEvent>;

export interface DonationSentEventObject {
  _donationReceiver: string;
  ETHAmount: BigNumber;
  USDAmount: BigNumber;
  CreatorsCoinAmount: BigNumber;
}
export type DonationSentEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  DonationSentEventObject
>;

export type DonationSentEventFilter = TypedEventFilter<DonationSentEvent>;

export interface DonationTransferredEventObject {
  caller: string;
  amount: BigNumber;
  coin: number;
}
export type DonationTransferredEvent = TypedEvent<
  [string, BigNumber, number],
  DonationTransferredEventObject
>;

export type DonationTransferredEventFilter =
  TypedEventFilter<DonationTransferredEvent>;

export interface InvestedEventObject {
  investor: string;
  investId: BigNumber;
  lowQuotaAmount: BigNumber;
  regQuotaAmount: BigNumber;
  highQuotaAmount: BigNumber;
  totalPayment: BigNumber;
  coin: number;
}
export type InvestedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number],
  InvestedEventObject
>;

export type InvestedEventFilter = TypedEventFilter<InvestedEvent>;

export interface InvestorMintedEventObject {
  investor: string;
  caller: string;
}
export type InvestorMintedEvent = TypedEvent<
  [string, string],
  InvestorMintedEventObject
>;

export type InvestorMintedEventFilter = TypedEventFilter<InvestorMintedEvent>;

export interface RefundedAllEventObject {
  investor: string;
  ETHAmount: BigNumber;
  USDAmount: BigNumber;
  CreatorsCoinAmount: BigNumber;
  investIdsRefunded: BigNumber[];
}
export type RefundedAllEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber[]],
  RefundedAllEventObject
>;

export type RefundedAllEventFilter = TypedEventFilter<RefundedAllEvent>;

export interface RefundedAllToAddressEventObject {
  manager: string;
  investor: string;
  ETHAmount: BigNumber;
  USDAmount: BigNumber;
  CreatorsCoinAmount: BigNumber;
  investIdsRefunded: BigNumber[];
}
export type RefundedAllToAddressEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber[]],
  RefundedAllToAddressEventObject
>;

export type RefundedAllToAddressEventFilter =
  TypedEventFilter<RefundedAllToAddressEvent>;

export interface RefundedInvestIdEventObject {
  investor: string;
  investId: BigNumber;
  amount: BigNumber;
  coin: number;
}
export type RefundedInvestIdEvent = TypedEvent<
  [string, BigNumber, BigNumber, number],
  RefundedInvestIdEventObject
>;

export type RefundedInvestIdEventFilter =
  TypedEventFilter<RefundedInvestIdEvent>;

export interface ICrowdfund extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICrowdfundInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    donate(
      amount: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    donateForAddress(
      donor: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllInvestIdsPerInvestor(
      investor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getCollection(overrides?: CallOverrides): Promise<[string]>;

    getDonationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDonationReceiver(overrides?: CallOverrides): Promise<[string]>;

    getDueDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getInvestIdInfos(
      investId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ICrowdfund.InvestIdInfosStructOutput]>;

    getInvestIdsPerInvestor(
      investor: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinSoldRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNextInvestId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPaymentsPerCoin(
      investor: PromiseOrValue<string>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getQuotaInfos(
      classz: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ICrowdfund.QuotaInfosStructOutput]>;

    initialize(
      valuesLowQuota: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      valuesRegQuota: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      valuesHighQuota: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      amountLowQuota: PromiseOrValue<BigNumberish>,
      amountRegQuota: PromiseOrValue<BigNumberish>,
      amountHighQuota: PromiseOrValue<BigNumberish>,
      donationReceiver: PromiseOrValue<string>,
      donationFee: PromiseOrValue<BigNumberish>,
      minSoldRate: PromiseOrValue<BigNumberish>,
      crowdfundDuration: PromiseOrValue<BigNumberish>,
      collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    invest(
      amountOfLowQuota: PromiseOrValue<BigNumberish>,
      amountOfRegularQuota: PromiseOrValue<BigNumberish>,
      amountOfHighQuota: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    investForAddress(
      investor: PromiseOrValue<string>,
      amountOfLowQuota: PromiseOrValue<BigNumberish>,
      amountOfRegularQuota: PromiseOrValue<BigNumberish>,
      amountOfHighQuota: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mint()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mint(address)"(
      investor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refundAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refundToAddress(
      investor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refundWithInvestId(
      investId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  donate(
    amount: PromiseOrValue<BigNumberish>,
    coin: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  donateForAddress(
    donor: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    coin: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllInvestIdsPerInvestor(
    investor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getCollection(overrides?: CallOverrides): Promise<string>;

  getDonationFee(overrides?: CallOverrides): Promise<BigNumber>;

  getDonationReceiver(overrides?: CallOverrides): Promise<string>;

  getDueDate(overrides?: CallOverrides): Promise<BigNumber>;

  getInvestIdInfos(
    investId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ICrowdfund.InvestIdInfosStructOutput>;

  getInvestIdsPerInvestor(
    investor: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinSoldRate(overrides?: CallOverrides): Promise<BigNumber>;

  getNextInvestId(overrides?: CallOverrides): Promise<BigNumber>;

  getPaymentsPerCoin(
    investor: PromiseOrValue<string>,
    coin: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getQuotaInfos(
    classz: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ICrowdfund.QuotaInfosStructOutput>;

  initialize(
    valuesLowQuota: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    valuesRegQuota: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    valuesHighQuota: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    amountLowQuota: PromiseOrValue<BigNumberish>,
    amountRegQuota: PromiseOrValue<BigNumberish>,
    amountHighQuota: PromiseOrValue<BigNumberish>,
    donationReceiver: PromiseOrValue<string>,
    donationFee: PromiseOrValue<BigNumberish>,
    minSoldRate: PromiseOrValue<BigNumberish>,
    crowdfundDuration: PromiseOrValue<BigNumberish>,
    collection: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  invest(
    amountOfLowQuota: PromiseOrValue<BigNumberish>,
    amountOfRegularQuota: PromiseOrValue<BigNumberish>,
    amountOfHighQuota: PromiseOrValue<BigNumberish>,
    coin: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  investForAddress(
    investor: PromiseOrValue<string>,
    amountOfLowQuota: PromiseOrValue<BigNumberish>,
    amountOfRegularQuota: PromiseOrValue<BigNumberish>,
    amountOfHighQuota: PromiseOrValue<BigNumberish>,
    coin: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mint()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mint(address)"(
    investor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refundAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refundToAddress(
    investor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refundWithInvestId(
    investId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFund(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    donate(
      amount: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    donateForAddress(
      donor: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllInvestIdsPerInvestor(
      investor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getCollection(overrides?: CallOverrides): Promise<string>;

    getDonationFee(overrides?: CallOverrides): Promise<BigNumber>;

    getDonationReceiver(overrides?: CallOverrides): Promise<string>;

    getDueDate(overrides?: CallOverrides): Promise<BigNumber>;

    getInvestIdInfos(
      investId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ICrowdfund.InvestIdInfosStructOutput>;

    getInvestIdsPerInvestor(
      investor: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinSoldRate(overrides?: CallOverrides): Promise<BigNumber>;

    getNextInvestId(overrides?: CallOverrides): Promise<BigNumber>;

    getPaymentsPerCoin(
      investor: PromiseOrValue<string>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuotaInfos(
      classz: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ICrowdfund.QuotaInfosStructOutput>;

    initialize(
      valuesLowQuota: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      valuesRegQuota: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      valuesHighQuota: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      amountLowQuota: PromiseOrValue<BigNumberish>,
      amountRegQuota: PromiseOrValue<BigNumberish>,
      amountHighQuota: PromiseOrValue<BigNumberish>,
      donationReceiver: PromiseOrValue<string>,
      donationFee: PromiseOrValue<BigNumberish>,
      minSoldRate: PromiseOrValue<BigNumberish>,
      crowdfundDuration: PromiseOrValue<BigNumberish>,
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    invest(
      amountOfLowQuota: PromiseOrValue<BigNumberish>,
      amountOfRegularQuota: PromiseOrValue<BigNumberish>,
      amountOfHighQuota: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    investForAddress(
      investor: PromiseOrValue<string>,
      amountOfLowQuota: PromiseOrValue<BigNumberish>,
      amountOfRegularQuota: PromiseOrValue<BigNumberish>,
      amountOfHighQuota: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint()"(overrides?: CallOverrides): Promise<void>;

    "mint(address)"(
      investor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    refundAll(overrides?: CallOverrides): Promise<void>;

    refundToAddress(
      investor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    refundWithInvestId(
      investId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFund(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CreatorWithdrawed(uint256,uint256,uint256)"(
      ETHAmount?: null,
      USDAmount?: null,
      CreatorsCoinAmount?: null
    ): CreatorWithdrawedEventFilter;
    CreatorWithdrawed(
      ETHAmount?: null,
      USDAmount?: null,
      CreatorsCoinAmount?: null
    ): CreatorWithdrawedEventFilter;

    "DonationSent(address,uint256,uint256,uint256)"(
      _donationReceiver?: PromiseOrValue<string> | null,
      ETHAmount?: null,
      USDAmount?: null,
      CreatorsCoinAmount?: null
    ): DonationSentEventFilter;
    DonationSent(
      _donationReceiver?: PromiseOrValue<string> | null,
      ETHAmount?: null,
      USDAmount?: null,
      CreatorsCoinAmount?: null
    ): DonationSentEventFilter;

    "DonationTransferred(address,uint256,uint8)"(
      caller?: PromiseOrValue<string> | null,
      amount?: null,
      coin?: null
    ): DonationTransferredEventFilter;
    DonationTransferred(
      caller?: PromiseOrValue<string> | null,
      amount?: null,
      coin?: null
    ): DonationTransferredEventFilter;

    "Invested(address,uint256,uint256,uint256,uint256,uint256,uint8)"(
      investor?: PromiseOrValue<string> | null,
      investId?: PromiseOrValue<BigNumberish> | null,
      lowQuotaAmount?: null,
      regQuotaAmount?: null,
      highQuotaAmount?: null,
      totalPayment?: null,
      coin?: null
    ): InvestedEventFilter;
    Invested(
      investor?: PromiseOrValue<string> | null,
      investId?: PromiseOrValue<BigNumberish> | null,
      lowQuotaAmount?: null,
      regQuotaAmount?: null,
      highQuotaAmount?: null,
      totalPayment?: null,
      coin?: null
    ): InvestedEventFilter;

    "InvestorMinted(address,address)"(
      investor?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null
    ): InvestorMintedEventFilter;
    InvestorMinted(
      investor?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null
    ): InvestorMintedEventFilter;

    "RefundedAll(address,uint256,uint256,uint256,uint256[])"(
      investor?: PromiseOrValue<string> | null,
      ETHAmount?: null,
      USDAmount?: null,
      CreatorsCoinAmount?: null,
      investIdsRefunded?: null
    ): RefundedAllEventFilter;
    RefundedAll(
      investor?: PromiseOrValue<string> | null,
      ETHAmount?: null,
      USDAmount?: null,
      CreatorsCoinAmount?: null,
      investIdsRefunded?: null
    ): RefundedAllEventFilter;

    "RefundedAllToAddress(address,address,uint256,uint256,uint256,uint256[])"(
      manager?: PromiseOrValue<string> | null,
      investor?: PromiseOrValue<string> | null,
      ETHAmount?: null,
      USDAmount?: null,
      CreatorsCoinAmount?: null,
      investIdsRefunded?: null
    ): RefundedAllToAddressEventFilter;
    RefundedAllToAddress(
      manager?: PromiseOrValue<string> | null,
      investor?: PromiseOrValue<string> | null,
      ETHAmount?: null,
      USDAmount?: null,
      CreatorsCoinAmount?: null,
      investIdsRefunded?: null
    ): RefundedAllToAddressEventFilter;

    "RefundedInvestId(address,uint256,uint256,uint8)"(
      investor?: PromiseOrValue<string> | null,
      investId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      coin?: null
    ): RefundedInvestIdEventFilter;
    RefundedInvestId(
      investor?: PromiseOrValue<string> | null,
      investId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      coin?: null
    ): RefundedInvestIdEventFilter;
  };

  estimateGas: {
    donate(
      amount: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    donateForAddress(
      donor: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllInvestIdsPerInvestor(
      investor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollection(overrides?: CallOverrides): Promise<BigNumber>;

    getDonationFee(overrides?: CallOverrides): Promise<BigNumber>;

    getDonationReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    getDueDate(overrides?: CallOverrides): Promise<BigNumber>;

    getInvestIdInfos(
      investId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvestIdsPerInvestor(
      investor: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinSoldRate(overrides?: CallOverrides): Promise<BigNumber>;

    getNextInvestId(overrides?: CallOverrides): Promise<BigNumber>;

    getPaymentsPerCoin(
      investor: PromiseOrValue<string>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuotaInfos(
      classz: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      valuesLowQuota: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      valuesRegQuota: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      valuesHighQuota: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      amountLowQuota: PromiseOrValue<BigNumberish>,
      amountRegQuota: PromiseOrValue<BigNumberish>,
      amountHighQuota: PromiseOrValue<BigNumberish>,
      donationReceiver: PromiseOrValue<string>,
      donationFee: PromiseOrValue<BigNumberish>,
      minSoldRate: PromiseOrValue<BigNumberish>,
      crowdfundDuration: PromiseOrValue<BigNumberish>,
      collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    invest(
      amountOfLowQuota: PromiseOrValue<BigNumberish>,
      amountOfRegularQuota: PromiseOrValue<BigNumberish>,
      amountOfHighQuota: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    investForAddress(
      investor: PromiseOrValue<string>,
      amountOfLowQuota: PromiseOrValue<BigNumberish>,
      amountOfRegularQuota: PromiseOrValue<BigNumberish>,
      amountOfHighQuota: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mint()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mint(address)"(
      investor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refundAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refundToAddress(
      investor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refundWithInvestId(
      investId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    donate(
      amount: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    donateForAddress(
      donor: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllInvestIdsPerInvestor(
      investor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollection(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDonationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDonationReceiver(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDueDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInvestIdInfos(
      investId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInvestIdsPerInvestor(
      investor: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinSoldRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextInvestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPaymentsPerCoin(
      investor: PromiseOrValue<string>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuotaInfos(
      classz: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      valuesLowQuota: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      valuesRegQuota: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      valuesHighQuota: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      amountLowQuota: PromiseOrValue<BigNumberish>,
      amountRegQuota: PromiseOrValue<BigNumberish>,
      amountHighQuota: PromiseOrValue<BigNumberish>,
      donationReceiver: PromiseOrValue<string>,
      donationFee: PromiseOrValue<BigNumberish>,
      minSoldRate: PromiseOrValue<BigNumberish>,
      crowdfundDuration: PromiseOrValue<BigNumberish>,
      collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    invest(
      amountOfLowQuota: PromiseOrValue<BigNumberish>,
      amountOfRegularQuota: PromiseOrValue<BigNumberish>,
      amountOfHighQuota: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    investForAddress(
      investor: PromiseOrValue<string>,
      amountOfLowQuota: PromiseOrValue<BigNumberish>,
      amountOfRegularQuota: PromiseOrValue<BigNumberish>,
      amountOfHighQuota: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mint()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mint(address)"(
      investor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refundAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refundToAddress(
      investor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refundWithInvestId(
      investId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
