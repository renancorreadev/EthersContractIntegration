/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ICRPStaking {
  export type StakingConditionStruct = {
    timeUnit: PromiseOrValue<BigNumberish>;
    rewardsPerUnitTime: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
    startTimestamp: PromiseOrValue<BigNumberish>;
    endTimestamp: PromiseOrValue<BigNumberish>;
  };

  export type StakingConditionStructOutput = [
    BigNumber,
    [BigNumber, BigNumber, BigNumber],
    BigNumber,
    BigNumber
  ] & {
    timeUnit: BigNumber;
    rewardsPerUnitTime: [BigNumber, BigNumber, BigNumber];
    startTimestamp: BigNumber;
    endTimestamp: BigNumber;
  };

  export type StakerStruct = {
    amountStaked: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
    timeOfLastUpdate: PromiseOrValue<BigNumberish>;
    unclaimedRewards: PromiseOrValue<BigNumberish>;
    conditionIdOflastUpdate: PromiseOrValue<BigNumberish>;
    stakersArrayIndex: PromiseOrValue<BigNumberish>;
  };

  export type StakerStructOutput = [
    [BigNumber, BigNumber, BigNumber],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    amountStaked: [BigNumber, BigNumber, BigNumber];
    timeOfLastUpdate: BigNumber;
    unclaimedRewards: BigNumber;
    conditionIdOflastUpdate: BigNumber;
    stakersArrayIndex: BigNumber;
  };
}

export interface CRPStakingInterface extends utils.Interface {
  functions: {
    "claimRewards()": FunctionFragment;
    "claimUSD()": FunctionFragment;
    "getAllStakersArray()": FunctionFragment;
    "getClassAmounts(uint8)": FunctionFragment;
    "getCurrentStakingCondition()": FunctionFragment;
    "getIsIndexed(uint256)": FunctionFragment;
    "getManagement()": FunctionFragment;
    "getNextConditionId()": FunctionFragment;
    "getSplitFactor(address)": FunctionFragment;
    "getStaker(address)": FunctionFragment;
    "getStakerAddress(uint256)": FunctionFragment;
    "getStakersArray(uint256)": FunctionFragment;
    "getStakingCondition(uint256)": FunctionFragment;
    "getStakingToken()": FunctionFragment;
    "getTotalSplitFactor()": FunctionFragment;
    "getUnclaimedUSD(address)": FunctionFragment;
    "initialize(address,uint256,uint256[3])": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setStakingCondition(uint256,uint256[3])": FunctionFragment;
    "splitUSD(address,uint256)": FunctionFragment;
    "stake(uint256[])": FunctionFragment;
    "stakeForAddress(address,uint256[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdraw(uint256[])": FunctionFragment;
    "withdrawForAddress(address,uint256[])": FunctionFragment;
    "withdrawToAddress(address,uint256,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimRewards"
      | "claimUSD"
      | "getAllStakersArray"
      | "getClassAmounts"
      | "getCurrentStakingCondition"
      | "getIsIndexed"
      | "getManagement"
      | "getNextConditionId"
      | "getSplitFactor"
      | "getStaker"
      | "getStakerAddress"
      | "getStakersArray"
      | "getStakingCondition"
      | "getStakingToken"
      | "getTotalSplitFactor"
      | "getUnclaimedUSD"
      | "initialize"
      | "onERC721Received"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "setStakingCondition"
      | "splitUSD"
      | "stake"
      | "stakeForAddress"
      | "transferOwnership"
      | "unpause"
      | "withdraw"
      | "withdrawForAddress"
      | "withdrawToAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claimUSD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllStakersArray",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClassAmounts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentStakingCondition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIsIndexed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getManagement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextConditionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSplitFactor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStaker",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakerAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakersArray",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingCondition",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSplitFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnclaimedUSD",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingCondition",
    values: [
      PromiseOrValue<BigNumberish>,
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "splitUSD",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeForAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawForAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToAddress",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimUSD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllStakersArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClassAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentStakingCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsIndexed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextConditionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSplitFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStaker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStakerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakersArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSplitFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnclaimedUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "splitUSD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToAddress",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RewardsClaimed(address,uint256)": EventFragment;
    "StakingConditionSet(uint256,uint256,uint256[3])": EventFragment;
    "TokensStaked(address,address,uint256[])": EventFragment;
    "TokensWithdrawn(address,uint256[])": EventFragment;
    "USDTokenClaimed(address,uint256)": EventFragment;
    "USDTokenSplitted(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WithdrawnForAddress(address,address,uint256[])": EventFragment;
    "WithdrawnToAddress(address,address,uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingConditionSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "USDTokenClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "USDTokenSplitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnForAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnToAddress"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RewardsClaimedEventObject {
  staker: string;
  rewardAmount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface StakingConditionSetEventObject {
  _conditionId: BigNumber;
  _timeUnit: BigNumber;
  _rewardsPerUnitTime: [BigNumber, BigNumber, BigNumber];
}
export type StakingConditionSetEvent = TypedEvent<
  [BigNumber, BigNumber, [BigNumber, BigNumber, BigNumber]],
  StakingConditionSetEventObject
>;

export type StakingConditionSetEventFilter =
  TypedEventFilter<StakingConditionSetEvent>;

export interface TokensStakedEventObject {
  caller: string;
  staker: string;
  tokenIds: BigNumber[];
}
export type TokensStakedEvent = TypedEvent<
  [string, string, BigNumber[]],
  TokensStakedEventObject
>;

export type TokensStakedEventFilter = TypedEventFilter<TokensStakedEvent>;

export interface TokensWithdrawnEventObject {
  staker: string;
  tokenIds: BigNumber[];
}
export type TokensWithdrawnEvent = TypedEvent<
  [string, BigNumber[]],
  TokensWithdrawnEventObject
>;

export type TokensWithdrawnEventFilter = TypedEventFilter<TokensWithdrawnEvent>;

export interface USDTokenClaimedEventObject {
  claimer: string;
  amount: BigNumber;
}
export type USDTokenClaimedEvent = TypedEvent<
  [string, BigNumber],
  USDTokenClaimedEventObject
>;

export type USDTokenClaimedEventFilter = TypedEventFilter<USDTokenClaimedEvent>;

export interface USDTokenSplittedEventObject {
  depositor: string;
  amount: BigNumber;
}
export type USDTokenSplittedEvent = TypedEvent<
  [string, BigNumber],
  USDTokenSplittedEventObject
>;

export type USDTokenSplittedEventFilter =
  TypedEventFilter<USDTokenSplittedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawnForAddressEventObject {
  manager: string;
  staker: string;
  tokenIds: BigNumber[];
}
export type WithdrawnForAddressEvent = TypedEvent<
  [string, string, BigNumber[]],
  WithdrawnForAddressEventObject
>;

export type WithdrawnForAddressEventFilter =
  TypedEventFilter<WithdrawnForAddressEvent>;

export interface WithdrawnToAddressEventObject {
  manager: string;
  receiver: string;
  amount: BigNumber;
  coin: number;
}
export type WithdrawnToAddressEvent = TypedEvent<
  [string, string, BigNumber, number],
  WithdrawnToAddressEventObject
>;

export type WithdrawnToAddressEventFilter =
  TypedEventFilter<WithdrawnToAddressEvent>;

export interface CRPStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CRPStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimUSD(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllStakersArray(overrides?: CallOverrides): Promise<[string[]]>;

    getClassAmounts(
      classz: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentStakingCondition(
      overrides?: CallOverrides
    ): Promise<[ICRPStaking.StakingConditionStructOutput]>;

    getIsIndexed(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getManagement(overrides?: CallOverrides): Promise<[string]>;

    getNextConditionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSplitFactor(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStaker(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ICRPStaking.StakerStructOutput]>;

    getStakerAddress(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getStakersArray(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getStakingCondition(
      conditionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ICRPStaking.StakingConditionStructOutput]>;

    getStakingToken(overrides?: CallOverrides): Promise<[string]>;

    getTotalSplitFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUnclaimedUSD(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      stakingToken: PromiseOrValue<string>,
      timeUnit: PromiseOrValue<BigNumberish>,
      rewardsPerUnitTime: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakingCondition(
      timeUnit: PromiseOrValue<BigNumberish>,
      rewardsPerUnitTime: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    splitUSD(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeForAddress(
      user: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawForAddress(
      staker: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawToAddress(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claimRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimUSD(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllStakersArray(overrides?: CallOverrides): Promise<string[]>;

  getClassAmounts(
    classz: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentStakingCondition(
    overrides?: CallOverrides
  ): Promise<ICRPStaking.StakingConditionStructOutput>;

  getIsIndexed(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getManagement(overrides?: CallOverrides): Promise<string>;

  getNextConditionId(overrides?: CallOverrides): Promise<BigNumber>;

  getSplitFactor(
    staker: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStaker(
    staker: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ICRPStaking.StakerStructOutput>;

  getStakerAddress(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getStakersArray(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getStakingCondition(
    conditionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ICRPStaking.StakingConditionStructOutput>;

  getStakingToken(overrides?: CallOverrides): Promise<string>;

  getTotalSplitFactor(overrides?: CallOverrides): Promise<BigNumber>;

  getUnclaimedUSD(
    staker: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    stakingToken: PromiseOrValue<string>,
    timeUnit: PromiseOrValue<BigNumberish>,
    rewardsPerUnitTime: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakingCondition(
    timeUnit: PromiseOrValue<BigNumberish>,
    rewardsPerUnitTime: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  splitUSD(
    from: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeForAddress(
    user: PromiseOrValue<string>,
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawForAddress(
    staker: PromiseOrValue<string>,
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawToAddress(
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    coin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimRewards(overrides?: CallOverrides): Promise<void>;

    claimUSD(overrides?: CallOverrides): Promise<void>;

    getAllStakersArray(overrides?: CallOverrides): Promise<string[]>;

    getClassAmounts(
      classz: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentStakingCondition(
      overrides?: CallOverrides
    ): Promise<ICRPStaking.StakingConditionStructOutput>;

    getIsIndexed(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getManagement(overrides?: CallOverrides): Promise<string>;

    getNextConditionId(overrides?: CallOverrides): Promise<BigNumber>;

    getSplitFactor(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStaker(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ICRPStaking.StakerStructOutput>;

    getStakerAddress(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getStakersArray(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getStakingCondition(
      conditionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ICRPStaking.StakingConditionStructOutput>;

    getStakingToken(overrides?: CallOverrides): Promise<string>;

    getTotalSplitFactor(overrides?: CallOverrides): Promise<BigNumber>;

    getUnclaimedUSD(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      stakingToken: PromiseOrValue<string>,
      timeUnit: PromiseOrValue<BigNumberish>,
      rewardsPerUnitTime: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setStakingCondition(
      timeUnit: PromiseOrValue<BigNumberish>,
      rewardsPerUnitTime: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    splitUSD(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    stakeForAddress(
      user: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdraw(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawForAddress(
      staker: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToAddress(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RewardsClaimed(address,uint256)"(
      staker?: PromiseOrValue<string> | null,
      rewardAmount?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      staker?: PromiseOrValue<string> | null,
      rewardAmount?: null
    ): RewardsClaimedEventFilter;

    "StakingConditionSet(uint256,uint256,uint256[3])"(
      _conditionId?: PromiseOrValue<BigNumberish> | null,
      _timeUnit?: null,
      _rewardsPerUnitTime?: null
    ): StakingConditionSetEventFilter;
    StakingConditionSet(
      _conditionId?: PromiseOrValue<BigNumberish> | null,
      _timeUnit?: null,
      _rewardsPerUnitTime?: null
    ): StakingConditionSetEventFilter;

    "TokensStaked(address,address,uint256[])"(
      caller?: PromiseOrValue<string> | null,
      staker?: PromiseOrValue<string> | null,
      tokenIds?: PromiseOrValue<BigNumberish>[] | null
    ): TokensStakedEventFilter;
    TokensStaked(
      caller?: PromiseOrValue<string> | null,
      staker?: PromiseOrValue<string> | null,
      tokenIds?: PromiseOrValue<BigNumberish>[] | null
    ): TokensStakedEventFilter;

    "TokensWithdrawn(address,uint256[])"(
      staker?: PromiseOrValue<string> | null,
      tokenIds?: PromiseOrValue<BigNumberish>[] | null
    ): TokensWithdrawnEventFilter;
    TokensWithdrawn(
      staker?: PromiseOrValue<string> | null,
      tokenIds?: PromiseOrValue<BigNumberish>[] | null
    ): TokensWithdrawnEventFilter;

    "USDTokenClaimed(address,uint256)"(
      claimer?: PromiseOrValue<string> | null,
      amount?: null
    ): USDTokenClaimedEventFilter;
    USDTokenClaimed(
      claimer?: PromiseOrValue<string> | null,
      amount?: null
    ): USDTokenClaimedEventFilter;

    "USDTokenSplitted(address,uint256)"(
      depositor?: PromiseOrValue<string> | null,
      amount?: null
    ): USDTokenSplittedEventFilter;
    USDTokenSplitted(
      depositor?: PromiseOrValue<string> | null,
      amount?: null
    ): USDTokenSplittedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WithdrawnForAddress(address,address,uint256[])"(
      manager?: PromiseOrValue<string> | null,
      staker?: PromiseOrValue<string> | null,
      tokenIds?: PromiseOrValue<BigNumberish>[] | null
    ): WithdrawnForAddressEventFilter;
    WithdrawnForAddress(
      manager?: PromiseOrValue<string> | null,
      staker?: PromiseOrValue<string> | null,
      tokenIds?: PromiseOrValue<BigNumberish>[] | null
    ): WithdrawnForAddressEventFilter;

    "WithdrawnToAddress(address,address,uint256,uint8)"(
      manager?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      coin?: null
    ): WithdrawnToAddressEventFilter;
    WithdrawnToAddress(
      manager?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      coin?: null
    ): WithdrawnToAddressEventFilter;
  };

  estimateGas: {
    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimUSD(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllStakersArray(overrides?: CallOverrides): Promise<BigNumber>;

    getClassAmounts(
      classz: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentStakingCondition(overrides?: CallOverrides): Promise<BigNumber>;

    getIsIndexed(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getManagement(overrides?: CallOverrides): Promise<BigNumber>;

    getNextConditionId(overrides?: CallOverrides): Promise<BigNumber>;

    getSplitFactor(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStaker(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakerAddress(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakersArray(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingCondition(
      conditionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalSplitFactor(overrides?: CallOverrides): Promise<BigNumber>;

    getUnclaimedUSD(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      stakingToken: PromiseOrValue<string>,
      timeUnit: PromiseOrValue<BigNumberish>,
      rewardsPerUnitTime: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakingCondition(
      timeUnit: PromiseOrValue<BigNumberish>,
      rewardsPerUnitTime: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    splitUSD(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeForAddress(
      user: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawForAddress(
      staker: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawToAddress(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimUSD(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllStakersArray(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClassAmounts(
      classz: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentStakingCondition(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsIndexed(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getManagement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextConditionId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSplitFactor(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStaker(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakerAddress(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakersArray(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingCondition(
      conditionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalSplitFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnclaimedUSD(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      stakingToken: PromiseOrValue<string>,
      timeUnit: PromiseOrValue<BigNumberish>,
      rewardsPerUnitTime: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakingCondition(
      timeUnit: PromiseOrValue<BigNumberish>,
      rewardsPerUnitTime: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    splitUSD(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeForAddress(
      user: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawForAddress(
      staker: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToAddress(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
